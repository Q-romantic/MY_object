import re
import base64
import cv2
import ddddocr
import io
import os
from PIL import Image
import numpy as np
import requests
from login import login_headers

""" 图片加工是一个难点，未能达到自动识别，给的教程识别不准确容易识别失败，自建方法成功率也不高，无奈死循环多尝试 """
""" 参考：https://blog.csdn.net/qq_38017966/article/details/119221282 """
""" 另外调用cv2.imshow展示图片时对opencv-python版本有要求 python39 -m pip install opencv-python==4.5.5.62 """


# 请求获得验证码信息
def get_verifyInfo(url):
    """解析待点选的字符和验证码图片"""
    response = session.get(url)
    data = response.json()['html']
    words = re.findall('<p>(.*?)</p>', data, re.S)
    image_base64 = re.search('base64,(?P<image_base64_data>.*?)" alt=', data, re.S).group('image_base64_data')
    image = base64.b64decode(image_base64)  # 图片解码成二进制

    # with open(r"1.jpg", 'wb') as f:
    #     f.write(image)
    # 按文件名打开图片文件，缺点不能直接用获取转码后二进制打开
    # img = cv2.imread(r"1.jpg")
    # cv2.imshow("title_name", img)
    # cv2.waitKey(0)

    # 读取二进制图片文件方法二
    image = Image.open(io.BytesIO(image))
    img = cv2.cvtColor(np.asarray(image), cv2.COLOR_RGB2BGR)
    # cv2.imshow("title_name", img)
    # cv2.waitKey(0)

    # 读取二进制图片文件方法一
    # image = np.frombuffer(image, np.uint8)
    # img = cv2.imdecode(image, cv2.IMREAD_ANYCOLOR)
    # cv2.imshow("title_name", img)
    # cv2.waitKey(0)

    return words, img


# 图像处理
def image_process(cv_img):
    """
    处理验证码图片，并使用easyocr模块识别图中中文汉字
    :param cv_img: cv格式图片内容
    :return: 返回九个识别出来的汉字
    :param cv_img:
    :return:
    """
    '''步骤一：处理图像背景'''
    im = cv_img
    # cv2.imshow("原图", im)
    # cv2.waitKey(0)

    # img.shape可以获得图像的形状，返回值是一个包含行数，列数，通道数的元组 (300, 300, 3)
    h, w = im.shape[0:2]

    # 去掉黑椒点的图像
    # np.all()函数用于判断整个数组中的元素的值是否全部满足条件，如果满足条件返回True，否则返回False
    # im[np.all(im == [0, 0, 0], axis=-1)] = (255, 255, 255) #将像素点为黑色的全部转换为白色的
    # cv2.imshow("test", im)
    # cv2.waitKey(0)

    # reshape：展平成n行3列的二维数组
    # np.unique()该函数是去除数组中的重复数字，并进行排序之后输出
    colors, counts = np.unique(np.array(im).reshape(-1, 3), axis=0, return_counts=True)

    ct = np.sort(counts)
    top2_counts = ct[-2:].tolist()

    # 筛选条件这里可以再完善一下，可以试试反向筛选，把频率最高的两种颜色筛掉试试
    # 通过后面的操作就可以移除背景中的噪点
    info_dict = {counts[i]: colors[i].tolist() for i, v in enumerate(counts) if not v in top2_counts}
    # colors_select=info_dict.values()
    colors_select = np.array([v for v in info_dict.values()])

    # 移除了背景的图片,赋值为去了黑色背景的colors就不会出现少一个字的情况
    remove_background_rgbs = colors_select
    mask = np.zeros((h, w, 3), np.uint8) + 255  # 生成一个全是白色的图片

    # 通过循环将不是噪点的像素,赋值给一个白色的图片,最后到达移除背景图片的效果
    for rgb in remove_background_rgbs:
        mask[np.all(im == rgb, axis=-1)] = im[np.all(im == rgb, axis=-1)]
    # cv2.imshow("Image with background removed", mask)  # 移除了背景的图片
    # cv2.waitKey(0)

    '''步骤二：移除干扰线条'''
    # 去掉线条,全部像素黑白化
    line_list = []  # 首先创建一个空列表,用来存放出现在间隔当中的像素点
    # 两个for循环,遍历9000次
    for y in range(h):
        for x in range(w):
            tmp = mask[x, y].tolist()
            if tmp != [0, 0, 0]:
                if 0 < y < 20 or 110 < y < 120 or 210 < y < 220:
                    line_list.append(tmp)
                if 0 < x < 10 or 100 < x < 110 or 200 < x < 210:
                    line_list.append(tmp)
    remove_line_rgbs = np.unique(np.array(line_list).reshape(-1, 3), axis=0)
    for rgb in remove_line_rgbs:
        mask[np.all(mask == rgb, axis=-1)] = [255, 255, 255]
    # np.any()函数用于判断整个数组中的元素至少有一个满足条件就返回True，否则返回False。
    mask[np.any(mask != [255, 255, 255], axis=-1)] = [0, 0, 0]
    # cv2.imshow("Image with lines removed", mask)  # 移除了线条的图片
    # cv2.waitKey(0)

    '''步骤三：图像膨胀腐蚀操作'''
    # 腐蚀
    # 卷积核涉及到python形态学处理的知识,感兴趣的可以自行百度
    # 生成一个2行三列数值全为1的二维数字,作为腐蚀操作中的卷积核

    kernel = np.ones((3, 3), 'uint8')
    # iterations 迭代的次数,也就是进行多少次腐蚀操作
    erode_img = cv2.erode(mask, kernel, iterations=1)
    # cv2.imshow('Eroded Image2', erode_img)
    # cv2.waitKey()   # 等待键盘输入，为毫秒级，防止图片一闪而过
    # cv2.imwrite('2.jpg',erode_img) 这行代码可以保存处理的图片

    '''给图像最右侧加一列空白'''
    # white = np.zeros((300, 300, 3), np.uint8) + 255  # 生成一个全是白色的图片,右侧加十个像素宽度的空白
    # img = np.concatenate([erode_img, white], axis=1)
    # cv2.imshow("Image add lines white", img)  # 移除了线条的图片
    # cv2.waitKey(0)

    return erode_img


# 手动识别
def manual_recognization(processed_img):
    cv2.imshow("Image processed", processed_img)  # 移除了背景等干扰的图片
    cv2.waitKey(0)

    x = 0  # 设置偏移量
    # value为田字(2*2格子)格验证码中的每个像素位置索引，从左往右，从上到下
    """
    0	1	2	3	4	5	6	7	8	9	.	10	11	12	13	14	15	16	17	18	19
    20	21	22	23	24	25	26	27	28	29	.	30	31	32	33	34	35	36	37	38	39
    40	41	42	43	44	45	46	47	48	49	.	50	51	52	53	54	55	56	57	58	59
    60	61	62	63	64	65	66	67	68	69	.	70	71	72	73	74	75	76	77	78	79
    80	81	82	83	84	85	86	87	88	89	.	90	91	92	93	94	95	96	97	98	99
    100	101	102	103	104	105	106	107	108	109	.	110	111	112	113	114	115	116	117	118	119
    120	121	122	123	124	125	126	127	128	129	.	130	131	132	133	134	135	136	137	138	139
    140	141	142	143	144	145	146	147	148	149	.	150	151	152	153	154	155	156	157	158	159
    160	161	162	163	164	165	166	167	168	169	.	170	171	172	173	174	175	176	177	178	179
    180	181	182	183	184	185	186	187	188	189	.	190	191	192	193	194	195	196	197	198	199
    .	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.
    200	201	202	203	204	205	206	207	208	209	.	210	211	212	213	214	215	216	217	218	219
    220	221	222	223	224	225	226	227	228	229	.	230	231	232	233	234	235	236	237	238	239
    240	241	242	243	244	245	246	247	248	249	.	250	251	252	253	254	255	256	257	258	259
    260	261	262	263	264	265	266	267	268	269	.	270	271	272	273	274	275	276	277	278	279
    280	281	282	283	284	285	286	287	288	289	.	290	291	292	293	294	295	296	297	298	299
    300	301	302	303	304	305	306	307	308	309	.	310	311	312	313	314	315	316	317	318	319
    320	321	322	323	324	325	326	327	328	329	.	330	331	332	333	334	335	336	337	338	339
    340	341	342	343	344	345	346	347	348	349	.	350	351	352	353	354	355	356	357	358	359
    360	361	362	363	364	365	366	367	368	369	.	370	371	372	373	374	375	376	377	378	379
    380	381	382	383	384	385	386	387	388	389	.	390	391	392	393	394	395	396	397	398	399
    """
    pixel_index_2 = {'1': 0 + x, '2': 10 + x,
                     '3': 200 + x, '4': 210 + x}  # 或者在此基础上加 0---[20*x+(1~9)]---189, 'x<10

    # value为九宫格(3*3格子)验证码中的每个像素位置索引，从左往右，从上到下
    """
    0	1	2	3	4	5	6	7	8	9	.	10	11	12	13	14	15	16	17	18	19	.	20	21	22	23	24	25	26	27	28	29
    30	31	32	33	34	35	36	37	38	39	.	40	41	42	43	44	45	46	47	48	49	.	50	51	52	53	54	55	56	57	58	59
    60	61	62	63	64	65	66	67	68	69	.	70	71	72	73	74	75	76	77	78	79	.	80	81	82	83	84	85	86	87	88	89
    90	91	92	93	94	95	96	97	98	99	.	100	101	102	103	104	105	106	107	108	109	.	110	111	112	113	114	115	116	117	118	119
    120	121	122	123	124	125	126	127	128	129	.	130	131	132	133	134	135	136	137	138	139	.	140	141	142	143	144	145	146	147	148	149
    150	151	152	153	154	155	156	157	158	159	.	160	161	162	163	164	165	166	167	168	169	.	170	171	172	173	174	175	176	177	178	179
    180	181	182	183	184	185	186	187	188	189	.	190	191	192	193	194	195	196	197	198	199	.	200	201	202	203	204	205	206	207	208	209
    210	211	212	213	214	215	216	217	218	219	.	220	221	222	223	224	225	226	227	228	229	.	230	231	232	233	234	235	236	237	238	239
    240	241	242	243	244	245	246	247	248	249	.	250	251	252	253	254	255	256	257	258	259	.	260	261	262	263	264	265	266	267	268	269
    270	271	272	273	274	275	276	277	278	279	.	280	281	282	283	284	285	286	287	288	289	.	290	291	292	293	294	295	296	297	298	299
    .	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.
    300	301	302	303	304	305	306	307	308	309	.	310	311	312	313	314	315	316	317	318	319	.	320	321	322	323	324	325	326	327	328	329
    330	331	332	333	334	335	336	337	338	339	.	340	341	342	343	344	345	346	347	348	349	.	350	351	352	353	354	355	356	357	358	359
    360	361	362	363	364	365	366	367	368	369	.	370	371	372	373	374	375	376	377	378	379	.	380	381	382	383	384	385	386	387	388	389
    390	391	392	393	394	395	396	397	398	399	.	400	401	402	403	404	405	406	407	408	409	.	410	411	412	413	414	415	416	417	418	419
    420	421	422	423	424	425	426	427	428	429	.	430	431	432	433	434	435	436	437	438	439	.	440	441	442	443	444	445	446	447	448	449
    450	451	452	453	454	455	456	457	458	459	.	460	461	462	463	464	465	466	467	468	469	.	470	471	472	473	474	475	476	477	478	479
    480	481	482	483	484	485	486	487	488	489	.	490	491	492	493	494	495	496	497	498	499	.	500	501	502	503	504	505	506	507	508	509
    510	511	512	513	514	515	516	517	518	519	.	520	521	522	523	524	525	526	527	528	529	.	530	531	532	533	534	535	536	537	538	539
    540	541	542	543	544	545	546	547	548	549	.	550	551	552	553	554	555	556	557	558	559	.	560	561	562	563	564	565	566	567	568	569
    570	571	572	573	574	575	576	577	578	579	.	580	581	582	583	584	585	586	587	588	589	.	590	591	592	593	594	595	596	597	598	599
    .	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.	.
    600	601	602	603	604	605	606	607	608	609	.	610	611	612	613	614	615	616	617	618	619	.	620	621	622	623	624	625	626	627	628	629
    630	631	632	633	634	635	636	637	638	639	.	640	641	642	643	644	645	646	647	648	649	.	650	651	652	653	654	655	656	657	658	659
    660	661	662	663	664	665	666	667	668	669	.	670	671	672	673	674	675	676	677	678	679	.	680	681	682	683	684	685	686	687	688	689
    690	691	692	693	694	695	696	697	698	699	.	700	701	702	703	704	705	706	707	708	709	.	710	711	712	713	714	715	716	717	718	719
    720	721	722	723	724	725	726	727	728	729	.	730	731	732	733	734	735	736	737	738	739	.	740	741	742	743	744	745	746	747	748	749
    750	751	752	753	754	755	756	757	758	759	.	760	761	762	763	764	765	766	767	768	769	.	770	771	772	773	774	775	776	777	778	779
    780	781	782	783	784	785	786	787	788	789	.	790	791	792	793	794	795	796	797	798	799	.	800	801	802	803	804	805	806	807	808	809
    810	811	812	813	814	815	816	817	818	819	.	820	821	822	823	824	825	826	827	828	829	.	830	831	832	833	834	835	836	837	838	839
    840	841	842	843	844	845	846	847	848	849	.	850	851	852	853	854	855	856	857	858	859	.	860	861	862	863	864	865	866	867	868	869
    870	871	872	873	874	875	876	877	878	879	.	880	881	882	883	884	885	886	887	888	889	.	890	891	892	893	894	895	896	897	898	899
    """
    pixel_index_3 = {'1': 0 + x, '2': 10 + x, '3': 20 + x,
                     '4': 300 + x, '5': 310 + x, '6': 320 + x,
                     '7': 600 + x, '8': 610 + x, '9': 620 + x}  # 或者在此基础上加 0---[30*x+(1~9)]---279, 'x<10

    # value为十六宫格(4*4格子)验证码中的每个像素位置索引，从左往右，从上到下
    """
    0	1	2	3	4	5	6	7	8	9	.	10	11	12	13	14	15	16	17	18	19	.	20	21	22	23	24	25	26	27	28	29	.	30	31	32	33	34	35	36	37	38	39
    40	41	42	43	44	45	46	47	48	49	.	50	51	52	53	54	55	56	57	58	59	.	60	61	62	63	64	65	66	67	68	69	.	70	71	72	73	74	75	76	77	78	79
    80	81	82	83	84	85	86	87	88	89	.	90	91	92	93	94	95	96	97	98	99	.	100	101	102	103	104	105	106	107	108	109	.	110	111	112	113	114	115	116	117	118	119
    120	121	122	123	124	125	126	127	128	129	.	130	131	132	133	134	135	136	137	138	139	.	140	141	142	143	144	145	146	147	148	149	.	150	151	152	153	154	155	156	157	158	159
    160	161	162	163	164	165	166	167	168	169	.	170	171	172	173	174	175	176	177	178	179	.	180	181	182	183	184	185	186	187	188	189	.	190	191	192	193	194	195	196	197	198	199
    200	201	202	203	204	205	206	207	208	209	.	210	211	212	213	214	215	216	217	218	219	.	220	221	222	223	224	225	226	227	228	229	.	230	231	232	233	234	235	236	237	238	239
    240	241	242	243	244	245	246	247	248	249	.	250	251	252	253	254	255	256	257	258	259	.	260	261	262	263	264	265	266	267	268	269	.	270	271	272	273	274	275	276	277	278	279
    280	281	282	283	284	285	286	287	288	289	.	290	291	292	293	294	295	296	297	298	299	.	300	301	302	303	304	305	306	307	308	309	.	310	311	312	313	314	315	316	317	318	319
    320	321	322	323	324	325	326	327	328	329	.	330	331	332	333	334	335	336	337	338	339	.	340	341	342	343	344	345	346	347	348	349	.	350	351	352	353	354	355	356	357	358	359
    360	361	362	363	364	365	366	367	368	369	.	370	371	372	373	374	375	376	377	378	379	.	380	381	382	383	384	385	386	387	388	389	.	390	391	392	393	394	395	396	397	398	399
    """
    pixel_index_4 = {'1': 0 + x, '2': 10 + x, '3': 20 + x, '4': 30 + x,
                     '5': 400 + x, '6': 410 + x, '7': 420 + x, '8': 430 + x,
                     '9': 800 + x, '10': 810 + x, '11': 820 + x, '12': 830 + x,
                     '13': 1200 + x, '14': 1210 + x, '15': 1220 + x,
                     '16': 1230 + x}  # 或者在此基础上加 0---[40*x+(1~9)]---369, 'x<10

    loc = input("手动输入坐标：")  # 例如：2468
    answer_str = ''
    for i in loc:
        answer_str += f'{pixel_index_3[i]}|'
    return answer_str


# ddddocr自动识别
def dddd(words, cv_img):
    def image_clip(cv_img):
        clip_imgs = []
        for y in range(0, 300, 100):
            for x in range(10, 300, 100):
                cropped = cv_img[y:y + 100, x:x + 100]  # 裁剪坐标为[y0:y1, x0:x1]
                clip_imgs.append(cropped)
        return clip_imgs

    clip_imgs = image_clip(cv_img)
    img_out = {}
    ocr = ddddocr.DdddOcr()
    for i, j in zip(clip_imgs, range(1, len(clip_imgs) + 1)):
        cv2.imwrite(f'3_{j}.jpg', i)
        with open(f'3_{j}.jpg', 'rb') as f:
            img_bytes = f.read()
            w = ocr.classification(img_bytes)
            img_out[w] = j
        os.remove(f'3_{j}.jpg')
    print(img_out)
    x = 0
    pixel_index_3 = {'1': 0 + x, '2': 10 + x, '3': 20 + x,
                     '4': 300 + x, '5': 310 + x, '6': 320 + x,
                     '7': 600 + x, '8': 610 + x, '9': 620 + x}  # 或者在此基础上加 0---[30*x+(1~9)]---279, 'x<10
    answer_str = ''
    for i in words:
        try:
            answer_str += f'{pixel_index_3[str(img_out[i])]}|'
        except:
            break

    return answer_str


# 获取请求数据
def get_data(url):
    total = []
    t = 0
    for i in range(1, 6):
        while 1:
            t += 1
            words, img = get_verifyInfo(url_verify)
            print(f'第{i}页待识别字符：', words)
            # img = cv2.imread(r"1.jpg")
            processed_img = image_process(img)
            # answer = manual_recognization(processed_img)  # 手动识别
            answer = dddd(words, processed_img)  # ddddocr自动识别，成功率不高
            params = {'page': i, 'answer': answer}
            try:
                response = session.get(url, headers={'User-Agent': 'yuanrenxue.project'}, params=params)
                # time.sleep(1)  # 避免运行过快请求失败报错结束，貌似成功率不高
                if response.status_code == 200:
                    print(response.text)
                    data = response.json()
                    for d in data["data"]:
                        total.append(d["value"])
                    break
                else:
                    print('识别失败')
            except:
                pass
    counts = np.bincount(total)
    x = np.argmax(counts)  # 获取众数
    print(f'共尝试{t}次')
    return x


# session = requests.session()  # 必须启用会话保持（此题特殊，不用带cooike里的sessionid，看结果是自动加上了）
# url_verify = 'http://match.yuanrenxue.com/api/match/8_verify'
# url = 'https://match.yuanrenxue.com/api/match/8'
# answer = get_data(url)
# print(session.cookies.get_dict())
# print(answer)
answer = 7453   # 此题特殊，容易失败，直接提交答案
# print(answer)
url = 'https://match.yuanrenxue.com/api/answer'
params = {'answer': answer, 'id': 8}
resq = requests.get(url, headers=login_headers, params=params)
data = resq.json()
print(data)

""" 答案固定：7453
{"status": "1", "state": "success", "data": [{"value": 7453}, {"value": 1457}, {"value": 5053}, {"value": 2127}, {"value": 4455}, {"value": 4290}, {"value": 9875}, {"value": 7453}, {"value": 8778}, {"value": 2571}]}
{"status": "1", "state": "success", "data": [{"value": 3932}, {"value": 5963}, {"value": 3372}, {"value": 9736}, {"value": 7831}, {"value": 1706}, {"value": 887}, {"value": 9955}, {"value": 4029}, {"value": 3034}]}
{"status": "1", "state": "success", "data": [{"value": 9606}, {"value": 3850}, {"value": 4106}, {"value": 2381}, {"value": 8545}, {"value": 2403}, {"value": 9984}, {"value": 7453}, {"value": 3585}, {"value": 7545}]}
{"status": "1", "state": "success", "data": [{"value": 5231}, {"value": 7453}, {"value": 6090}, {"value": 6476}, {"value": 2965}, {"value": 5510}, {"value": 3879}, {"value": 7453}, {"value": 5821}, {"value": 1356}]}
{"status": "1", "state": "success", "data": [{"value": 4798}, {"value": 8040}, {"value": 3086}, {"value": 7453}, {"value": 9874}, {"value": 4251}, {"value": 2862}, {"value": 677}, {"value": 9708}, {"value": 7902}]}
"""

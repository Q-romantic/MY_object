// 注意：如下用于测试js代码能否跑通
key = "io3RNbg7qWGy5ZJePUrklQ=="
x = [138, 141, 209, 53, 184, 59, 169, 97, 178, 229, 146, 94, 61, 74, 228, 149]
sss = '{"method":"GET","header":[{"key":"x-wx-exclude-credentials","value":"unionid, cloudbase-access-token, openid"},{"key":"x-wx-region","value":"ap-beijing"},{"key":"x-wx-gateway-id","value":"gw-1-1g2n1gd143d56b56"},{"key":"host","value":"api-h5-tgw.ibox.art"},{"key":"accept-language","value":"zh-CN"},{"key":"ib-device-id","value":"11582baf51704c07af7b0a987ed57ef5"},{"key":"ib-trans-id","value":"79d0a7bc999448bd86fc7b5ef13d237c"},{"key":"x-cloudbase-phone","value":""},{"key":"ib-platform-type","value":"web"},{"key":"content-type","value":"application/json"},{"key":"user-agent","value":""},{"key":"x-wx-env","value":"ibox-3gldlr1u1a8322d4"},{"key":"x-wx-call-id","value":"0.5940741496223056_1668671793828"},{"key":"x-wx-resource-appid","value":"wxb5b2c81edbd4cf69"},{"key":"x-wx-container-path","value":"/nft-mall-web/nft/contentList"}],"body":"undefined","call_id":"0.5940741496223056_1668671793828"}'
b = [123, 34, 109, 101, 116, 104, 111, 100, 34, 58, 34, 71, 69, 84, 34, 44, 34, 104, 101, 97, 100, 101, 114, 34, 58, 91, 123, 34, 107, 101, 121, 34, 58, 34, 120, 45, 119, 120, 45, 101, 120, 99, 108, 117, 100, 101, 45, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 34, 44, 34, 118, 97, 108, 117, 101, 34, 58, 34, 117, 110, 105, 111, 110, 105, 100, 44, 32, 99, 108, 111, 117, 100, 98, 97, 115, 101, 45, 97, 99, 99, 101, 115, 115, 45, 116, 111, 107, 101, 110, 44, 32, 111, 112, 101, 110, 105, 100, 34, 125, 44, 123, 34, 107, 101, 121, 34, 58, 34, 120, 45, 119, 120, 45, 114, 101, 103, 105, 111, 110, 34, 44, 34, 118, 97, 108, 117, 101, 34, 58, 34, 97, 112, 45, 98, 101, 105, 106, 105, 110, 103, 34, 125, 44, 123, 34, 107, 101, 121, 34, 58, 34, 120, 45, 119, 120, 45, 103, 97, 116, 101, 119, 97, 121, 45, 105, 100, 34, 44, 34, 118, 97, 108, 117, 101, 34, 58, 34, 103, 119, 45, 49, 45, 49, 103, 50, 110, 49, 103, 100, 49, 52, 51, 100, 53, 54, 98, 53, 54, 34, 125, 44, 123, 34, 107, 101, 121, 34, 58, 34, 104, 111, 115, 116, 34, 44, 34, 118, 97, 108, 117, 101, 34, 58, 34, 97, 112, 105, 45, 104, 53, 45, 116, 103, 119, 46, 105, 98, 111, 120, 46, 97, 114, 116, 34, 125, 44, 123, 34, 107, 101, 121, 34, 58, 34, 97, 99, 99, 101, 112, 116, 45, 108, 97, 110, 103, 117, 97, 103, 101, 34, 44, 34, 118, 97, 108, 117, 101, 34, 58, 34, 122, 104, 45, 67, 78, 34, 125, 44, 123, 34, 107, 101, 121, 34, 58, 34, 105, 98, 45, 100, 101, 118, 105, 99, 101, 45, 105, 100, 34, 44, 34, 118, 97, 108, 117, 101, 34, 58, 34, 49, 49, 53, 56, 50, 98, 97, 102, 53, 49, 55, 48, 52, 99, 48, 55, 97, 102, 55, 98, 48, 97, 57, 56, 55, 101, 100, 53, 55, 101, 102, 53, 34, 125, 44, 123, 34, 107, 101, 121, 34, 58, 34, 105, 98, 45, 116, 114, 97, 110, 115, 45, 105, 100, 34, 44, 34, 118, 97, 108, 117, 101, 34, 58, 34, 55, 57, 100, 48, 97, 55, 98, 99, 57, 57, 57, 52, 52, 56, 98, 100, 56, 54, 102, 99, 55, 98, 53, 101, 102, 49, 51, 100, 50, 51, 55, 99, 34, 125, 44, 123, 34, 107, 101, 121, 34, 58, 34, 120, 45, 99, 108, 111, 117, 100, 98, 97, 115, 101, 45, 112, 104, 111, 110, 101, 34, 44, 34, 118, 97, 108, 117, 101, 34, 58, 34, 34, 125, 44, 123, 34, 107, 101, 121, 34, 58, 34, 105, 98, 45, 112, 108, 97, 116, 102, 111, 114, 109, 45, 116, 121, 112, 101, 34, 44, 34, 118, 97, 108, 117, 101, 34, 58, 34, 119, 101, 98, 34, 125, 44, 123, 34, 107, 101, 121, 34, 58, 34, 99, 111, 110, 116, 101, 110, 116, 45, 116, 121, 112, 101, 34, 44, 34, 118, 97, 108, 117, 101, 34, 58, 34, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 106, 115, 111, 110, 34, 125, 44, 123, 34, 107, 101, 121, 34, 58, 34, 117, 115, 101, 114, 45, 97, 103, 101, 110, 116, 34, 44, 34, 118, 97, 108, 117, 101, 34, 58, 34, 34, 125, 44, 123, 34, 107, 101, 121, 34, 58, 34, 120, 45, 119, 120, 45, 101, 110, 118, 34, 44, 34, 118, 97, 108, 117, 101, 34, 58, 34, 105, 98, 111, 120, 45, 51, 103, 108, 100, 108, 114, 49, 117, 49, 97, 56, 51, 50, 50, 100, 52, 34, 125, 44, 123, 34, 107, 101, 121, 34, 58, 34, 120, 45, 119, 120, 45, 99, 97, 108, 108, 45, 105, 100, 34, 44, 34, 118, 97, 108, 117, 101, 34, 58, 34, 48, 46, 53, 57, 52, 48, 55, 52, 49, 52, 57, 54, 50, 50, 51, 48, 53, 54, 95, 49, 54, 54, 56, 54, 55, 49, 55, 57, 51, 56, 50, 56, 34, 125, 44, 123, 34, 107, 101, 121, 34, 58, 34, 120, 45, 119, 120, 45, 114, 101, 115, 111, 117, 114, 99, 101, 45, 97, 112, 112, 105, 100, 34, 44, 34, 118, 97, 108, 117, 101, 34, 58, 34, 119, 120, 98, 53, 98, 50, 99, 56, 49, 101, 100, 98, 100, 52, 99, 102, 54, 57, 34, 125, 44, 123, 34, 107, 101, 121, 34, 58, 34, 120, 45, 119, 120, 45, 99, 111, 110, 116, 97, 105, 110, 101, 114, 45, 112, 97, 116, 104, 34, 44, 34, 118, 97, 108, 117, 101, 34, 58, 34, 47, 110, 102, 116, 45, 109, 97, 108, 108, 45, 119, 101, 98, 47, 110, 102, 116, 47, 99, 111, 110, 116, 101, 110, 116, 76, 105, 115, 116, 34, 125, 93, 44, 34, 98, 111, 100, 121, 34, 58, 34, 117, 110, 100, 101, 102, 105, 110, 101, 100, 34, 44, 34, 99, 97, 108, 108, 95, 105, 100, 34, 58, 34, 48, 46, 53, 57, 52, 48, 55, 52, 49, 52, 57, 54, 50, 50, 51, 48, 53, 54, 95, 49, 54, 54, 56, 54, 55, 49, 55, 57, 51, 56, 50, 56, 34, 125]
N = [135, 7, 240, 111, 123, 34, 109, 101, 116, 104, 111, 100, 34, 58, 34, 71, 69, 84, 34, 44, 34, 104, 101, 97, 100, 101, 114, 34, 58, 91, 123, 34, 107, 101, 121, 34, 58, 34, 120, 45, 119, 120, 45, 101, 120, 99, 108, 117, 100, 101, 45, 99, 114, 101, 100, 101, 110, 116, 105, 97, 108, 115, 34, 44, 34, 118, 97, 108, 117, 101, 34, 58, 34, 117, 110, 105, 111, 110, 105, 100, 44, 32, 99, 108, 111, 117, 100, 98, 97, 115, 101, 45, 97, 99, 99, 101, 115, 115, 45, 116, 111, 107, 101, 110, 44, 32, 111, 112, 101, 110, 105, 100, 34, 125, 44, 123, 46, 85, 0, 32, 114, 101, 103, 105, 111, 110, 34, 44, 34, 17, 72, 40, 97, 112, 45, 98, 101, 105, 106, 105, 110, 103, 34, 58, 43, 0, 36, 103, 97, 116, 101, 119, 97, 121, 45, 105, 100, 29, 47, 80, 103, 119, 45, 49, 45, 49, 103, 50, 110, 49, 103, 100, 49, 52, 51, 100, 53, 54, 98, 53, 54, 29, 58, 12, 104, 111, 115, 116, 29, 47, 72, 97, 112, 105, 45, 104, 53, 45, 116, 103, 119, 46, 105, 98, 111, 120, 46, 97, 114, 116, 29, 45, 60, 97, 99, 99, 101, 112, 116, 45, 108, 97, 110, 103, 117, 97, 103, 101, 34, 25, 150, 16, 122, 104, 45, 67, 78, 29, 42, 36, 105, 98, 45, 100, 101, 118, 105, 99, 101, 45, 50, 142, 0, 124, 49, 49, 53, 56, 50, 98, 97, 102, 53, 49, 55, 48, 52, 99, 48, 55, 97, 102, 55, 98, 48, 97, 57, 56, 55, 101, 100, 53, 55, 101, 102, 53, 54, 66, 0, 20, 116, 114, 97, 110, 115, 45, 50, 65, 0, 124, 55, 57, 100, 48, 97, 55, 98, 99, 57, 57, 57, 52, 52, 56, 98, 100, 56, 54, 102, 99, 55, 98, 53, 101, 102, 49, 51, 100, 50, 51, 55, 99, 29, 65, 16, 120, 45, 99, 108, 111, 45, 106, 12, 112, 104, 111, 110, 46, 175, 0, 29, 39, 56, 105, 98, 45, 112, 108, 97, 116, 102, 111, 114, 109, 45, 116, 121, 112, 46, 38, 0, 8, 119, 101, 98, 29, 41, 24, 99, 111, 110, 116, 101, 110, 116, 62, 37, 0, 60, 97, 112, 112, 108, 105, 99, 97, 116, 105, 111, 110, 47, 106, 115, 111, 110, 29, 50, 32, 117, 115, 101, 114, 45, 97, 103, 101, 110, 46, 98, 1, 29, 32, 0, 120, 69, 54, 8, 110, 118, 34, 57, 72, 33, 117, 64, 45, 51, 103, 108, 100, 108, 114, 49, 117, 49, 97, 56, 51, 50, 50, 100, 52, 62, 51, 0, 12, 99, 97, 108, 108, 54, 23, 1, 124, 48, 46, 53, 57, 52, 48, 55, 52, 49, 52, 57, 54, 50, 50, 51, 48, 53, 54, 95, 49, 54, 54, 56, 54, 55, 49, 55, 57, 51, 56, 50, 56, 62, 66, 0, 44, 114, 101, 115, 111, 117, 114, 99, 101, 45, 97, 112, 112, 50, 96, 1, 68, 119, 120, 98, 53, 98, 50, 99, 56, 49, 101, 100, 98, 100, 52, 99, 102, 54, 57, 62, 59, 0, 33, 7, 36, 97, 105, 110, 101, 114, 45, 112, 97, 116, 104, 29, 187, 20, 47, 110, 102, 116, 45, 109, 1, 155, 8, 119, 101, 98, 1, 13, 0, 47, 1, 43, 56, 101, 110, 116, 76, 105, 115, 116, 34, 125, 93, 44, 34, 98, 111, 100, 97, 45, 28, 117, 110, 100, 101, 102, 105, 110, 101, 65, 167, 1, 203, 16, 95, 105, 100, 34, 58, 138, 195, 0]
L = [238, 191, 50, 107, 217, 245, 119, 146, 225, 153, 192, 217, 46, 205, 11, 73, 22, 13, 56, 98, 240, 157, 77, 134, 6, 182, 122, 214, 99, 140, 96, 228, 177, 148, 236, 208, 88, 145, 44, 251, 242, 111, 97, 128, 130, 14, 193, 9, 27, 110, 7, 86, 215, 102, 161, 236, 233, 62, 118, 185, 167, 165, 174, 12, 201, 180, 4, 99, 208, 203, 226, 166, 162, 132, 111, 199, 91, 113, 157, 56, 91, 41, 38, 85, 96, 104, 220, 47, 153, 69, 44, 213, 168, 9, 155, 65, 192, 84, 132, 49, 93, 61, 72, 45, 121, 167, 13, 235, 231, 211, 159, 137, 242, 214, 17, 15, 5, 89, 182, 191, 226, 151, 225, 124, 140, 91, 176, 220, 40, 224, 34, 189, 13, 109, 0, 122, 138, 103, 153, 184, 44, 203, 216, 234, 57, 45, 29, 154, 243, 76, 76, 247, 55, 227, 105, 231, 58, 69, 175, 105, 170, 129, 197, 15, 142, 157, 209, 125, 38, 35, 28, 253, 48, 76, 42, 171, 55, 249, 31, 165, 190, 108, 136, 48, 128, 72, 68, 128, 226, 172, 241, 18, 189, 187, 107, 224, 96, 218, 130, 94, 205, 189, 128, 20, 198, 134, 28, 234, 77, 245, 62, 40, 81, 121, 220, 229, 89, 23, 43, 36, 158, 167, 120, 214, 50, 189, 219, 135, 128, 241, 154, 150, 186, 7, 119, 183, 54, 114, 107, 102, 253, 215, 167, 189, 243, 88, 111, 246, 66, 154, 252, 174, 62, 6, 37, 155, 253, 32, 145, 42, 251, 147, 79, 124, 145, 87, 8, 180, 57, 139, 186, 190, 72, 143, 197, 243, 56, 207, 227, 94, 18, 223, 190, 63, 92, 89, 41, 3, 164, 217, 117, 78, 60, 109, 58, 218, 243, 99, 195, 203, 79, 104, 49, 88, 207, 120, 82, 249, 42, 27, 30, 63, 86, 131, 199, 163, 141, 81, 37, 106, 98, 52, 142, 36, 82, 236, 70, 154, 64, 133, 90, 30, 93, 179, 230, 48, 60, 127, 44, 104, 90, 108, 23, 140, 128, 79, 84, 176, 44, 139, 232, 110, 117, 91, 162, 92, 56, 219, 95, 141, 41, 136, 136, 64, 23, 58, 193, 57, 14, 23, 131, 50, 155, 114, 63, 16, 224, 207, 149, 197, 135, 207, 195, 100, 115, 62, 67, 133, 40, 69, 92, 169, 17, 203, 220, 10, 243, 124, 50, 241, 13, 184, 191, 142, 1, 143, 247, 235, 254, 128, 32, 95, 240, 246, 29, 33, 211, 242, 1, 96, 120, 216, 13, 138, 68, 33, 216, 137, 14, 136, 58, 93, 7, 131, 211, 119, 2, 228, 206, 7, 81, 190, 170, 14, 77, 253, 108, 40, 142, 218, 220, 85, 50, 220, 100, 178, 173, 190, 232, 116, 185, 168, 25, 159, 226, 105, 103, 229, 115, 81, 182, 131, 164, 194, 94, 197, 236, 7, 18, 184, 221, 225, 32, 156, 63, 53, 174, 170, 98, 252, 59, 82, 233, 178, 167, 113, 98, 206, 188, 117, 144, 87, 53, 237, 249, 170, 227, 169, 117, 123, 69, 75, 252, 44, 32, 97, 167, 217, 178, 225, 9, 184, 29, 184, 130, 59, 117, 31, 252, 163, 42, 80, 3, 71, 40, 88, 129, 226, 185, 9, 111, 71, 192, 1, 153, 175, 250, 240, 120, 84, 248, 2, 210, 9, 70, 213, 92, 223, 212, 88, 14, 17, 230, 251, 166, 29, 176, 65, 38, 36, 35, 144, 158, 126, 126, 219, 104, 76, 184, 106, 181, 188, 94, 1, 189, 103, 247, 117, 140, 161, 10, 52, 191, 111, 177, 207, 31, 252, 182, 108, 255, 80, 189, 212, 184, 178, 12, 168, 146, 123, 35, 212, 56, 218, 190, 145, 201, 249, 44, 13, 87, 233, 35, 208]


///////////////////////////////////////////////////////////////////////// sss --> b
function m(e) {
    for (var t = [], r = 0; r < e.length; r++) {
        var n = e.charCodeAt(r);
        n < 128 ? t.push(n) : n < 2048 ? t.push(192 | n >> 6, 128 | 63 & n) : n < 55296 || n >= 57344 ? t.push(224 | n >> 12, 128 | n >> 6 & 63, 128 | 63 & n) : (r++,
            n = 65536 + ((1023 & n) << 10 | 1023 & e.charCodeAt(r)),
            t.push(240 | n >> 18, 128 | n >> 12 & 63, 128 | n >> 6 & 63, 128 | 63 & n))
    }
    return new Uint8Array(t)
}

// console.log(m(sss))

///////////////////////////////////////////////////////////////////////// b --> sss
function v(n) {
    var e = new Array(128)
        , t = String.fromCodePoint || String.fromCharCode
        , r = [];
    var i, o, a = n.length;
    r.length = 0;
    for (var s = 0; s < a;)
        (o = n[s++]) <= 127 ? i = o : o <= 223 ? i = (31 & o) << 6 | 63 & n[s++] : o <= 239 ? i = (15 & o) << 12 | (63 & n[s++]) << 6 | 63 & n[s++] : String.fromCodePoint ? i = (7 & o) << 18 | (63 & n[s++]) << 12 | (63 & n[s++]) << 6 | 63 & n[s++] : (i = 63,
            s += 3),
            r.push(e[i] || (e[i] = t(i)));
    return r.join("")
}

///////////////////////////////////////////////////////////////////////// 压缩 b --> N
function get_b_to_N(arr) {
    tmp = arr

    var l = 14
        , d = new Array(l + 1);

    function n(e, t) {
        return 506832829 * e >>> t
    }

    function ii(e, t) {
        return e[t] + (e[t + 1] << 8) + (e[t + 2] << 16) + (e[t + 3] << 24)
    }

    function o(e, t, r) {
        return e[t] === e[r] && e[t + 1] === e[r + 1] && e[t + 2] === e[r + 2] && e[t + 3] === e[r + 3]
    }

    function a(e, t, r, n, i) {
        return r <= 60 ? (n[i] = r - 1 << 2,
            i += 1) : r < 256 ? (n[i] = 240,
            n[i + 1] = r - 1,
            i += 2) : (n[i] = 244,
            n[i + 1] = r - 1 & 255,
            n[i + 2] = r - 1 >>> 8,
            i += 3),
            function (e, t, r, n, i) {
                var o;
                for (o = 0; o < i; o++)
                    r[n + o] = e[t + o]
            }(e, t, n, i, r),
        i + r
    }

    function s(e, t, r, n) {
        return n < 12 && r < 2048 ? (e[t] = 1 + (n - 4 << 2) + (r >>> 8 << 5),
            e[t + 1] = 255 & r,
        t + 2) : (e[t] = 2 + (n - 1 << 2),
            e[t + 1] = 255 & r,
            e[t + 2] = r >>> 8,
        t + 3)
    }

    function u(e, t, r, n) {
        for (; n >= 68;)
            t = s(e, t, r, 64),
                n -= 64;
        return n > 64 && (t = s(e, t, r, 60),
            n -= 60),
            s(e, t, r, n)
    }


    function f(e, t, r, s, f) {
        for (var c = 1; 1 << c <= r && c <= l;)
            c += 1;
        var h = 32 - (c -= 1);
        void 0 === d[c] && (d[c] = new Uint16Array(1 << c));
        var _, p = d[c];
        for (_ = 0; _ < p.length; _++)
            p[_] = 0;
        var E, g, y, m, v, S, A, T, C, w, b = t + r, O = t, I = t, R = !0;
        if (r >= 15)
            for (E = b - 15,
                     y = n(ii(e, t += 1), h); R;) {
                S = 32,
                    m = t;
                do {
                    if (g = y,
                        A = S >>> 5,
                        S += 1,
                        m = (t = m) + A,
                    t > E) {
                        R = !1;
                        break
                    }
                    y = n(ii(e, m), h),
                        v = O + p[g],
                        p[g] = t - O
                } while (!o(e, t, v));
                if (!R)
                    break;
                f = a(e, I, t - I, s, f);
                do {
                    for (T = t,
                             C = 4; t + C < b && e[t + C] === e[v + C];)
                        C += 1;
                    if (t += C,
                        f = u(s, f, T - v, C),
                        I = t,
                    t >= E) {
                        R = !1;
                        break
                    }
                    p[n(ii(e, t - 1), h)] = t - 1 - O,
                        v = O + p[w = n(ii(e, t), h)],
                        p[w] = t - O
                } while (o(e, t, v));
                if (!R)
                    break;
                y = n(ii(e, t += 1), h)
            }
        return I < b && (f = a(e, I, b - I, s, f)),
            f
    }


    maxCompressedLength = function (e) {
        var e = e.length;
        return 32 + e + Math.floor(e / 6)
    }

    compressToBuffer = function (e) {
        var t, r = tmp, n = r.length, i = 0, o = 0;
        for (o = function (e, t, r) {
            do {
                t[r] = 127 & e,
                (e >>>= 7) > 0 && (t[r] += 128),
                    r += 1
            } while (e > 0);
            return r
        }(n, e, o); i < n;)
            o = f(r, i, t = Math.min(n - i, 65536), e, o),
                i += t;
        return o
    }


    uncompress = function (e) {
        // if (!a(e) && !s(e) && !u(e))
        //     throw new TypeError(l);
        // var t = !1
        //     , n = !1;
        // a(e) ? t = !0 : s(e) && (n = !0,
        //     e = new Uint8Array(e));
        var i, o, c = new f(e), d = readUncompressedLength();
        console.log(d, "ooooooo")
        if (-1 === d)
            throw new Error("Invalid Snappy bitstream");
        if (1) {
            if (i = new Uint8Array(d),
                !uncompressToBuffer(i)) ;
            // throw new Error("Invalid Snappy bitstream")
        } else if (n) {
            if (i = new ArrayBuffer(d),
                o = new Uint8Array(i),
                !uncompressToBuffer(o)) ;
            // throw new Error("Invalid Snappy bitstream")
        } else if (i = r.alloc(d),
            !uncompressToBuffer(i)) ;
        // throw new Error("Invalid Snappy bitstream");
        return i
    }


    compress = function (e) {
        var i, f, h = maxCompressedLength(e);
        i = new Uint8Array(h)
        f = compressToBuffer(i)
        return i.slice(0, f)
    }
    return compress(arr)
}

// console.log(get_b_to_N(m(sss)))

///////////////////////////////////////////////////////////////////////// 解压 N --> b
function get_N_to_b(N) {
    tmp = N
    pos = 0

    function n(e, t, r, n, i) {
        var o;
        for (o = 0; o < i; o++)
            r[n + o] = e[t + o]
    }

    function i(e, t, r, n) {
        var i;
        for (i = 0; i < n; i++)
            e[t + i] = e[t - r + i]
    }

    var a = [0, 255, 65535, 16777215, 4294967295];
    readUncompressedLength = function () {
        for (var e, t, r = 0, n = 0; n < 32 && pos < tmp.length;) {
            if (e = tmp[pos],
                this.pos += 1,
            (t = 127 & e) << n >>> n !== t)
                return -1;
            if (r |= t << n,
            e < 128)
                return r;
            n += 7
        }
        return -1
    }
    uncompressToBuffer = function (e) {
        for (var t, r, o, s, u = tmp, f = u.length, c = pos, l = 0; c < u.length;)
            if (t = u[c],
                c += 1,
            0 == (3 & t)) {
                if ((r = 1 + (t >>> 2)) > 60) {
                    if (c + 3 >= f)
                        return !1;
                    o = r - 60,
                        r = 1 + ((r = u[c] + (u[c + 1] << 8) + (u[c + 2] << 16) + (u[c + 3] << 24)) & a[o]),
                        c += o
                }
                if (c + r > f)
                    return !1;
                n(u, c, e, l, r),
                    c += r,
                    l += r
            } else {
                switch (3 & t) {
                    case 1:
                        r = 4 + (t >>> 2 & 7),
                            s = u[c] + (t >>> 5 << 8),
                            c += 1;
                        break;
                    case 2:
                        if (c + 1 >= f)
                            return !1;
                        r = 1 + (t >>> 2),
                            s = u[c] + (u[c + 1] << 8),
                            c += 2;
                        break;
                    case 3:
                        if (c + 3 >= f)
                            return !1;
                        r = 1 + (t >>> 2),
                            s = u[c] + (u[c + 1] << 8) + (u[c + 2] << 16) + (u[c + 3] << 24),
                            c += 4
                }
                if (0 === s || s > l)
                    return !1;
                i(e, l, s, r),
                    l += r
            }
        return !0
    }
    uncompress = function (e) {
        // if (!a(e) && !s(e) && !u(e))
        //     throw new TypeError(l);
        var t = !1
            , n = !1;
        1 ? t = !0 : s(e) && (n = !0,
            e = new Uint8Array(e));
        var i, o, d = readUncompressedLength();
        if (-1 === d)
            throw new Error("Invalid Snappy bitstream");
        if (t) {
            if (i = new Uint8Array(d),
                !uncompressToBuffer(i))
                throw new Error("Invalid Snappy bitstream")
        } else if (n) {
            if (i = new ArrayBuffer(d),
                o = new Uint8Array(i),
                !uncompressToBuffer(o))
                throw new Error("Invalid Snappy bitstream")
        } else if (i = r.alloc(d),
            !uncompressToBuffer(i))
            throw new Error("Invalid Snappy bitstream");
        return i
    }

    return uncompress(N)
}

// console.log(get_N_to_b(N))

///////////////////////////////////////////////////////////////////////// key --> x
// key = "io3RNbg7qWGy5ZJePUrklQ=="
// x = [138, 141, 209, 53, 184, 59, 169, 97, 178, 229, 146, 94, 61, 74, 228, 149]

var y = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

base64ToArrayBuffer = function (e) {
    for (var t = function (e) {
        var t = String(e).replace(/=+$/, "")
            , r = "";
        if (t.length % 4 == 1)
            throw new Error('"atob" failed');
        for (var n = 0, i = void 0, o = void 0, a = 0; o = t.charAt(a++); ~o && (i = n % 4 ? 64 * i + o : o,
        n++ % 4) ? r += String.fromCharCode(255 & i >> (-2 * n & 6)) : 0)
            o = y.indexOf(o);
        return r
    }(e), r = t.length, n = new Uint8Array(r), i = 0; i < r; i++)
        n[i] = t.charCodeAt(i);
    return n
}

// console.log(base64ToArrayBuffer(key).toString())

///////////////////////////////////////////////////////////////////////// x --> key
arrayBufferToBase64 = function (e) {
    for (var t = "", r = new Uint8Array(e), n = r.byteLength, i = 0; i < n; i++)
        t += String.fromCharCode(r[i]);
    return function (e) {
        for (var t = String(e), r = "", n = void 0, i = void 0, o = 0, a = y; t.charAt(0 | o) || (a = "=",
        o % 1); r += a.charAt(63 & n >> 8 - o % 1 * 8)) {
            if ((i = t.charCodeAt(o += .75)) > 255)
                throw new Error('"btoa" failed');
            n = n << 8 | i
        }
        return r
    }(t)
}

// console.log(arrayBufferToBase64(x).toString())

/////////////////////////////////////////////////////////////////////// 加密(N + x) --> L
/////////////////////////////////////////////////////////////////////// 解密(L + x) --> N

function g(e, t, r, n, i) {
    var o = e.length - t
        , a = o < i ? o : i;
    return e.set(r.subarray(n, n + a), t),
        a
}

function _(e) {
    return e instanceof Uint8Array
}

function E(e, t, r) {
    var n = t ? t.byteLength : r || 65536;
    if (4095 & n || n <= 0)
        throw new Error("heap size must be a positive integer and a multiple of 4096");
    return t = t || new e(new ArrayBuffer(n))
}

S = (() => {
        var e, t, r = !1;

        function n(r, n) {
            var i = e[(t[r] + t[n]) % 255];
            return 0 !== r && 0 !== n || (i = 0),
                i
        }

        var i, o, a, s;

        function u() {
            function u(r) {
                var n, i, o;
                for (i = o = function (r) {
                    var n = e[255 - t[r]];
                    return 0 === r && (n = 0),
                        n
                }(r),
                         n = 0; n < 4; n++)
                    o ^= i = 255 & (i << 1 | i >>> 7);
                return o ^= 99
            }

            r || function () {
                e = [],
                    t = [];
                var n, i, o = 1;
                for (n = 0; n < 255; n++)
                    e[n] = o,
                        i = 128 & o,
                        o <<= 1,
                        o &= 255,
                    128 === i && (o ^= 27),
                        o ^= e[n],
                        t[e[n]] = n;
                e[255] = e[0],
                    t[0] = 0,
                    r = !0
            }(),
                i = [],
                o = [],
                a = [[], [], [], []],
                s = [[], [], [], []];
            for (var f = 0; f < 256; f++) {
                var c = u(f);
                i[f] = c,
                    o[c] = f,
                    a[0][f] = n(2, c) << 24 | c << 16 | c << 8 | n(3, c),
                    s[0][c] = n(14, f) << 24 | n(9, f) << 16 | n(13, f) << 8 | n(11, f);
                for (var l = 1; l < 4; l++)
                    a[l][f] = a[l - 1][f] >>> 8 | a[l - 1][f] << 24,
                        s[l][c] = s[l - 1][c] >>> 8 | s[l - 1][c] << 24
            }
        }

        var f = function (e, t) {
            u();
            var r = new Uint32Array(t);
            r.set(i, 512),
                r.set(o, 768);
            for (var n = 0; n < 4; n++)
                r.set(a[n], 4096 + 1024 * n >> 2),
                    r.set(s[n], 8192 + 1024 * n >> 2);
            var f = function (e, t, r) {
                "use asm";
                var n = 0
                    , i = 0
                    , o = 0
                    , a = 0
                    , s = 0
                    , u = 0
                    , f = 0
                    , c = 0
                    , l = 0
                    , d = 0
                    , h = 0
                    , _ = 0
                    , p = 0
                    , E = 0
                    , g = 0
                    , y = 0
                    , m = 0
                    , v = 0
                    , S = 0
                    , A = 0
                    , T = 0;
                var C = new e.Uint32Array(r)
                    , w = new e.Uint8Array(r);

                function b(e, t, r, s, u, f, c, l) {
                    e = e | 0;
                    t = t | 0;
                    r = r | 0;
                    s = s | 0;
                    u = u | 0;
                    f = f | 0;
                    c = c | 0;
                    l = l | 0;
                    var d = 0
                        , h = 0
                        , _ = 0
                        , p = 0
                        , E = 0
                        , g = 0
                        , y = 0
                        , m = 0;
                    d = r | 0x400,
                        h = r | 0x800,
                        _ = r | 0xc00;
                    u = u ^ C[(e | 0) >> 2],
                        f = f ^ C[(e | 4) >> 2],
                        c = c ^ C[(e | 8) >> 2],
                        l = l ^ C[(e | 12) >> 2];
                    for (m = 16; (m | 0) <= s << 4; m = m + 16 | 0) {
                        p = C[(r | u >> 22 & 1020) >> 2] ^ C[(d | f >> 14 & 1020) >> 2] ^ C[(h | c >> 6 & 1020) >> 2] ^ C[(_ | l << 2 & 1020) >> 2] ^ C[(e | m | 0) >> 2],
                            E = C[(r | f >> 22 & 1020) >> 2] ^ C[(d | c >> 14 & 1020) >> 2] ^ C[(h | l >> 6 & 1020) >> 2] ^ C[(_ | u << 2 & 1020) >> 2] ^ C[(e | m | 4) >> 2],
                            g = C[(r | c >> 22 & 1020) >> 2] ^ C[(d | l >> 14 & 1020) >> 2] ^ C[(h | u >> 6 & 1020) >> 2] ^ C[(_ | f << 2 & 1020) >> 2] ^ C[(e | m | 8) >> 2],
                            y = C[(r | l >> 22 & 1020) >> 2] ^ C[(d | u >> 14 & 1020) >> 2] ^ C[(h | f >> 6 & 1020) >> 2] ^ C[(_ | c << 2 & 1020) >> 2] ^ C[(e | m | 12) >> 2];
                        u = p,
                            f = E,
                            c = g,
                            l = y
                    }
                    n = C[(t | u >> 22 & 1020) >> 2] << 24 ^ C[(t | f >> 14 & 1020) >> 2] << 16 ^ C[(t | c >> 6 & 1020) >> 2] << 8 ^ C[(t | l << 2 & 1020) >> 2] ^ C[(e | m | 0) >> 2],
                        i = C[(t | f >> 22 & 1020) >> 2] << 24 ^ C[(t | c >> 14 & 1020) >> 2] << 16 ^ C[(t | l >> 6 & 1020) >> 2] << 8 ^ C[(t | u << 2 & 1020) >> 2] ^ C[(e | m | 4) >> 2],
                        o = C[(t | c >> 22 & 1020) >> 2] << 24 ^ C[(t | l >> 14 & 1020) >> 2] << 16 ^ C[(t | u >> 6 & 1020) >> 2] << 8 ^ C[(t | f << 2 & 1020) >> 2] ^ C[(e | m | 8) >> 2],
                        a = C[(t | l >> 22 & 1020) >> 2] << 24 ^ C[(t | u >> 14 & 1020) >> 2] << 16 ^ C[(t | f >> 6 & 1020) >> 2] << 8 ^ C[(t | c << 2 & 1020) >> 2] ^ C[(e | m | 12) >> 2]
                }

                function O(e, t, r, n) {
                    e = e | 0;
                    t = t | 0;
                    r = r | 0;
                    n = n | 0;
                    b(0x0000, 0x0800, 0x1000, T, e, t, r, n)
                }

                function I(e, t, r, n) {
                    e = e | 0;
                    t = t | 0;
                    r = r | 0;
                    n = n | 0;
                    var o = 0;
                    b(0x0400, 0x0c00, 0x2000, T, e, n, r, t);
                    o = i,
                        i = a,
                        a = o
                }

                function R(e, t, r, l) {
                    e = e | 0;
                    t = t | 0;
                    r = r | 0;
                    l = l | 0;
                    b(0x0000, 0x0800, 0x1000, T, s ^ e, u ^ t, f ^ r, c ^ l);
                    s = n,
                        u = i,
                        f = o,
                        c = a
                }

                function N(e, t, r, l) {
                    e = e | 0;
                    t = t | 0;
                    r = r | 0;
                    l = l | 0;
                    var d = 0;
                    b(0x0400, 0x0c00, 0x2000, T, e, l, r, t);
                    d = i,
                        i = a,
                        a = d;
                    n = n ^ s,
                        i = i ^ u,
                        o = o ^ f,
                        a = a ^ c;
                    s = e,
                        u = t,
                        f = r,
                        c = l
                }

                function D(e, t, r, l) {
                    e = e | 0;
                    t = t | 0;
                    r = r | 0;
                    l = l | 0;
                    b(0x0000, 0x0800, 0x1000, T, s, u, f, c);
                    s = n = n ^ e,
                        u = i = i ^ t,
                        f = o = o ^ r,
                        c = a = a ^ l
                }

                function x(e, t, r, l) {
                    e = e | 0;
                    t = t | 0;
                    r = r | 0;
                    l = l | 0;
                    b(0x0000, 0x0800, 0x1000, T, s, u, f, c);
                    n = n ^ e,
                        i = i ^ t,
                        o = o ^ r,
                        a = a ^ l;
                    s = e,
                        u = t,
                        f = r,
                        c = l
                }

                function L(e, t, r, l) {
                    e = e | 0;
                    t = t | 0;
                    r = r | 0;
                    l = l | 0;
                    b(0x0000, 0x0800, 0x1000, T, s, u, f, c);
                    s = n,
                        u = i,
                        f = o,
                        c = a;
                    n = n ^ e,
                        i = i ^ t,
                        o = o ^ r,
                        a = a ^ l
                }

                function M(e, t, r, s) {
                    e = e | 0;
                    t = t | 0;
                    r = r | 0;
                    s = s | 0;
                    b(0x0000, 0x0800, 0x1000, T, l, d, h, _);
                    _ = ~y & _ | y & _ + 1;
                    h = ~g & h | g & h + ((_ | 0) == 0);
                    d = ~E & d | E & d + ((h | 0) == 0);
                    l = ~p & l | p & l + ((d | 0) == 0);
                    n = n ^ e;
                    i = i ^ t;
                    o = o ^ r;
                    a = a ^ s
                }

                function P(e, t, r, n) {
                    e = e | 0;
                    t = t | 0;
                    r = r | 0;
                    n = n | 0;
                    var i = 0
                        , o = 0
                        , a = 0
                        , l = 0
                        , d = 0
                        , h = 0
                        , _ = 0
                        , p = 0
                        , E = 0
                        , g = 0;
                    e = e ^ s,
                        t = t ^ u,
                        r = r ^ f,
                        n = n ^ c;
                    i = m | 0,
                        o = v | 0,
                        a = S | 0,
                        l = A | 0;
                    for (; (E | 0) < 128; E = E + 1 | 0) {
                        if (i >>> 31) {
                            d = d ^ e,
                                h = h ^ t,
                                _ = _ ^ r,
                                p = p ^ n
                        }
                        i = i << 1 | o >>> 31,
                            o = o << 1 | a >>> 31,
                            a = a << 1 | l >>> 31,
                            l = l << 1;
                        g = n & 1;
                        n = n >>> 1 | r << 31,
                            r = r >>> 1 | t << 31,
                            t = t >>> 1 | e << 31,
                            e = e >>> 1;
                        if (g)
                            e = e ^ 0xe1000000
                    }
                    s = d,
                        u = h,
                        f = _,
                        c = p
                }

                function U(e) {
                    e = e | 0;
                    T = e
                }

                function B(e, t, r, s) {
                    e = e | 0;
                    t = t | 0;
                    r = r | 0;
                    s = s | 0;
                    n = e,
                        i = t,
                        o = r,
                        a = s
                }

                function k(e, t, r, n) {
                    e = e | 0;
                    t = t | 0;
                    r = r | 0;
                    n = n | 0;
                    s = e,
                        u = t,
                        f = r,
                        c = n
                }

                function G(e, t, r, n) {
                    e = e | 0;
                    t = t | 0;
                    r = r | 0;
                    n = n | 0;
                    l = e,
                        d = t,
                        h = r,
                        _ = n
                }

                function q(e, t, r, n) {
                    e = e | 0;
                    t = t | 0;
                    r = r | 0;
                    n = n | 0;
                    p = e,
                        E = t,
                        g = r,
                        y = n
                }

                function F(e, t, r, n) {
                    e = e | 0;
                    t = t | 0;
                    r = r | 0;
                    n = n | 0;
                    _ = ~y & _ | y & n,
                        h = ~g & h | g & r,
                        d = ~E & d | E & t,
                        l = ~p & l | p & e
                }

                function W(e) {
                    e = e | 0;
                    if (e & 15)
                        return -1;
                    w[e | 0] = n >>> 24,
                        w[e | 1] = n >>> 16 & 255,
                        w[e | 2] = n >>> 8 & 255,
                        w[e | 3] = n & 255,
                        w[e | 4] = i >>> 24,
                        w[e | 5] = i >>> 16 & 255,
                        w[e | 6] = i >>> 8 & 255,
                        w[e | 7] = i & 255,
                        w[e | 8] = o >>> 24,
                        w[e | 9] = o >>> 16 & 255,
                        w[e | 10] = o >>> 8 & 255,
                        w[e | 11] = o & 255,
                        w[e | 12] = a >>> 24,
                        w[e | 13] = a >>> 16 & 255,
                        w[e | 14] = a >>> 8 & 255,
                        w[e | 15] = a & 255;
                    return 16
                }

                function j(e) {
                    e = e | 0;
                    if (e & 15)
                        return -1;
                    w[e | 0] = s >>> 24,
                        w[e | 1] = s >>> 16 & 255,
                        w[e | 2] = s >>> 8 & 255,
                        w[e | 3] = s & 255,
                        w[e | 4] = u >>> 24,
                        w[e | 5] = u >>> 16 & 255,
                        w[e | 6] = u >>> 8 & 255,
                        w[e | 7] = u & 255,
                        w[e | 8] = f >>> 24,
                        w[e | 9] = f >>> 16 & 255,
                        w[e | 10] = f >>> 8 & 255,
                        w[e | 11] = f & 255,
                        w[e | 12] = c >>> 24,
                        w[e | 13] = c >>> 16 & 255,
                        w[e | 14] = c >>> 8 & 255,
                        w[e | 15] = c & 255;
                    return 16
                }

                function K() {
                    O(0, 0, 0, 0);
                    m = n,
                        v = i,
                        S = o,
                        A = a
                }

                function H(e, t, r) {
                    e = e | 0;
                    t = t | 0;
                    r = r | 0;
                    var s = 0;
                    if (t & 15)
                        return -1;
                    while ((r | 0) >= 16) {
                        V[e & 7](w[t | 0] << 24 | w[t | 1] << 16 | w[t | 2] << 8 | w[t | 3], w[t | 4] << 24 | w[t | 5] << 16 | w[t | 6] << 8 | w[t | 7], w[t | 8] << 24 | w[t | 9] << 16 | w[t | 10] << 8 | w[t | 11], w[t | 12] << 24 | w[t | 13] << 16 | w[t | 14] << 8 | w[t | 15]);
                        w[t | 0] = n >>> 24,
                            w[t | 1] = n >>> 16 & 255,
                            w[t | 2] = n >>> 8 & 255,
                            w[t | 3] = n & 255,
                            w[t | 4] = i >>> 24,
                            w[t | 5] = i >>> 16 & 255,
                            w[t | 6] = i >>> 8 & 255,
                            w[t | 7] = i & 255,
                            w[t | 8] = o >>> 24,
                            w[t | 9] = o >>> 16 & 255,
                            w[t | 10] = o >>> 8 & 255,
                            w[t | 11] = o & 255,
                            w[t | 12] = a >>> 24,
                            w[t | 13] = a >>> 16 & 255,
                            w[t | 14] = a >>> 8 & 255,
                            w[t | 15] = a & 255;
                        s = s + 16 | 0,
                            t = t + 16 | 0,
                            r = r - 16 | 0
                    }
                    return s | 0
                }

                function Y(e, t, r) {
                    e = e | 0;
                    t = t | 0;
                    r = r | 0;
                    var n = 0;
                    if (t & 15)
                        return -1;
                    while ((r | 0) >= 16) {
                        J[e & 1](w[t | 0] << 24 | w[t | 1] << 16 | w[t | 2] << 8 | w[t | 3], w[t | 4] << 24 | w[t | 5] << 16 | w[t | 6] << 8 | w[t | 7], w[t | 8] << 24 | w[t | 9] << 16 | w[t | 10] << 8 | w[t | 11], w[t | 12] << 24 | w[t | 13] << 16 | w[t | 14] << 8 | w[t | 15]);
                        n = n + 16 | 0,
                            t = t + 16 | 0,
                            r = r - 16 | 0
                    }
                    return n | 0
                }

                var V = [O, I, R, N, D, x, L, M];
                var J = [R, P];
                return {
                    set_rounds: U,
                    set_state: B,
                    set_iv: k,
                    set_nonce: G,
                    set_mask: q,
                    set_counter: F,
                    get_state: W,
                    get_iv: j,
                    gcm_init: K,
                    cipher: H,
                    mac: Y
                }
            }({
                Uint8Array: Uint8Array,
                Uint32Array: Uint32Array
            }, e, t);
            return f.set_key = function (e, t, n, o, a, u, c, l, d) {
                var h = r.subarray(0, 60)
                    , _ = r.subarray(256, 316);
                h.set([t, n, o, a, u, c, l, d]);
                for (var p = e, E = 1; p < 4 * e + 28; p++) {
                    var g = h[p - 1];
                    (p % e == 0 || 8 === e && p % e == 4) && (g = i[g >>> 24] << 24 ^ i[g >>> 16 & 255] << 16 ^ i[g >>> 8 & 255] << 8 ^ i[255 & g]),
                    p % e == 0 && (g = g << 8 ^ g >>> 24 ^ E << 24,
                        E = E << 1 ^ (128 & E ? 27 : 0)),
                        h[p] = h[p - e] ^ g
                }
                for (var y = 0; y < p; y += 4)
                    for (var m = 0; m < 4; m++)
                        g = h[p - (4 + y) + (4 - m) % 4],
                            _[y + m] = y < 4 || y >= p - 4 ? g : s[0][i[g >>> 24]] ^ s[1][i[g >>> 16 & 255]] ^ s[2][i[g >>> 8 & 255]] ^ s[3][i[255 & g]];
                f.set_rounds(e + 5)
            }
                ,
                f
        };
        return f.ENC = {
            ECB: 0,
            CBC: 2,
            CFB: 4,
            OFB: 6,
            CTR: 7
        },
            f.DEC = {
                ECB: 1,
                CBC: 3,
                CFB: 5,
                OFB: 6,
                CTR: 7
            },
            f.MAC = {
                CBC: 0,
                GCM: 1
            },
            f.HEAP_DATA = 16384,
            f
    }
)()
    , A = new Uint8Array(1048576)
    , T = (() => S(null, A.buffer))();

class C {
    constructor(e, t, r, n, i) {
        this.nonce = null,
            this.counter = 0,
            this.counterSize = 0,
            this.heap = E(Uint8Array, n).subarray(S.HEAP_DATA),
            this.asm = i || S(null, this.heap.buffer),
            this.mode = null,
            this.key = null,
            this.AES_reset(e, t, r)
    }

    AES_set_key(e) {
        if (void 0 !== e) {
            // if (!_(e))
            //     throw new TypeError("unexpected key type");
            var t = e.length;
            if (16 !== t && 24 !== t && 32 !== t)
                throw new m("illegal key size");
            var r = new DataView(e.buffer, e.byteOffset, e.byteLength);
            this.asm.set_key(t >> 2, r.getUint32(0), r.getUint32(4), r.getUint32(8), r.getUint32(12), t > 16 ? r.getUint32(16) : 0, t > 16 ? r.getUint32(20) : 0, t > 24 ? r.getUint32(24) : 0, t > 24 ? r.getUint32(28) : 0),
                this.key = e
        } else if (!this.key)
            throw new Error("key is required")
    }

    AES_CTR_set_options(e, t, r) {
        if (void 0 !== r) {
            if (r < 8 || r > 48)
                throw new m("illegal counter size");
            this.counterSize = r;
            var n = Math.pow(2, r) - 1;
            this.asm.set_mask(0, 0, n / 4294967296 | 0, 0 | n)
        } else
            this.counterSize = r = 48,
                this.asm.set_mask(0, 0, 65535, 4294967295);
        if (void 0 === e)
            throw new Error("nonce is required");
        if (!_(e))
            throw new TypeError("unexpected nonce type");
        var i = e.length;
        if (!i || i > 16)
            throw new m("illegal nonce size");
        this.nonce = e;
        var o = new DataView(new ArrayBuffer(16));
        if (new Uint8Array(o.buffer).set(e),
            this.asm.set_nonce(o.getUint32(0), o.getUint32(4), o.getUint32(8), o.getUint32(12)),
        void 0 !== t) {
            if (!l(t))
                throw new TypeError("unexpected counter type");
            if (t < 0 || t >= Math.pow(2, r))
                throw new m("illegal counter value");
            this.counter = t,
                this.asm.set_counter(0, 0, t / 4294967296 | 0, 0 | t)
        } else
            this.counter = 0
    }

    AES_set_iv(e) {
        if (void 0 !== e) {
            // if (!_(e))
            //     throw new TypeError("unexpected iv type");
            // if (16 !== e.length)
            //     throw new m("illegal iv size");
            e = new Uint8Array(e)
            var t = new DataView(e.buffer, e.byteOffset, e.byteLength);
            this.iv = e,
                this.asm.set_iv(t.getUint32(0), t.getUint32(4), t.getUint32(8), t.getUint32(12))
        } else
            this.iv = null,
                this.asm.set_iv(0, 0, 0, 0)
    }

    AES_set_padding(e) {
        this.padding = void 0 === e || !!e
    }

    AES_reset(e, t, r) {
        return this.result = null,
            this.pos = 0,
            this.len = 0,
            this.AES_set_key(e),
            this.AES_set_iv(t),
            this.AES_set_padding(r),
            this
    }

    AES_Encrypt_process(e) {
        if (!_(e))
            throw new TypeError("data isn't of expected type");
        for (var t = this.asm, r = this.heap, n = S.ENC[this.mode], i = S.HEAP_DATA, o = this.pos, a = this.len, s = 0, u = e.length || 0, f = 0, c = 0, l = new Uint8Array(a + u & -16); u > 0;)
            a += c = g(r, o + a, e, s, u),
                s += c,
                u -= c,
            (c = t.cipher(n, i + o, a)) && l.set(r.subarray(o, o + c), f),
                f += c,
                c < a ? (o += c,
                    a -= c) : (o = 0,
                    a = 0);
        return this.result = l,
            this.pos = o,
            this.len = a,
            this
    }

    AES_Encrypt_finish(e) {
        var t = null
            , r = 0;
        void 0 !== e && (r = (t = this.AES_Encrypt_process(e).result).length);
        var n = this.asm
            , i = this.heap
            , o = 2
            , a = S.HEAP_DATA
            , s = this.pos
            , u = this.len
            , f = 16 - u % 16
            , c = u;
        if (this.hasOwnProperty("padding")) {
            if (this.padding) {
                for (var l = 0; l < f; ++l)
                    i[s + u + l] = f;
                c = u += f
            } else if (u % 16)
                throw new m("data length must be a multiple of the block size")
        } else
            u += f;
        var d = new Uint8Array(r + c);
        return r && d.set(t),
        u && n.cipher(o, a + s, u),
        c && d.set(i.subarray(s, s + c), r),
            this.result = d,
            this.pos = 0,
            this.len = 0,
            this
    }

    AES_Decrypt_process(e) {
        if (!_(e))
            throw new TypeError("data isn't of expected type");
        var t = this.asm
            , r = this.heap
            , n = S.DEC[this.mode]
            , i = S.HEAP_DATA
            , o = this.pos
            , a = this.len
            , s = 0
            , u = e.length || 0
            , f = 0
            , c = a + u & -16
            , l = 0
            , d = 0;
        this.padding && (c -= l = a + u - c || 16);
        for (var h = new Uint8Array(c); u > 0;)
            a += d = g(r, o + a, e, s, u),
                s += d,
                u -= d,
            (d = t.cipher(n, i + o, a - (u ? 0 : l))) && h.set(r.subarray(o, o + d), f),
                f += d,
                d < a ? (o += d,
                    a -= d) : (o = 0,
                    a = 0);
        return this.result = h,
            this.pos = o,
            this.len = a,
            this
    }

    AES_Decrypt_finish(e) {
        var t = null
            , r = 0;
        void 0 !== e && (r = (t = this.AES_Decrypt_process(e).result).length);
        var n = this.asm
            , i = this.heap
            , o = S.DEC[this.mode]
            , a = S.HEAP_DATA
            , s = this.pos
            , u = this.len
            , f = u;
        if (u > 0) {
            if (u % 16) {
                if (this.hasOwnProperty("padding"))
                    throw new m("data length must be a multiple of the block size");
                u += 16 - u % 16
            }
            if (n.cipher(o, a + s, u),
            this.hasOwnProperty("padding") && this.padding) {
                var c = i[s + f - 1];
                if (c < 1 || c > 16 || c > f)
                    throw new v("bad padding");
                for (var l = 0, d = c; d > 1; d--)
                    l |= c ^ i[s + f - d];
                if (l)
                    throw new v("bad padding");
                f -= c
            }
        }
        var h = new Uint8Array(r + f);
        return r > 0 && h.set(t),
        f > 0 && h.set(i.subarray(s, s + f), r),
            this.result = h,
            this.pos = 0,
            this.len = 0,
            this
    }
}

var w = (() => {
        class e extends C {
            constructor(e) {
                super(e, arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null, !(arguments.length > 2 && void 0 !== arguments[2]) || arguments[2], arguments.length > 3 ? arguments[3] : void 0, arguments.length > 4 ? arguments[4] : void 0),
                    this.mode = "CBC",
                    this.BLOCK_SIZE = 16
            }

            encrypt(e) {
                return this.AES_Encrypt_finish(e)
            }

            decrypt(e) {
                return this.AES_Decrypt_finish(e)
            }
        }

        return e.encrypt = I,
            e.decrypt = R,
            e
    }
)();

function I(e, t, r, n) {
    if (void 0 === e)
        throw new SyntaxError("data required");
    if (void 0 === t)
        throw new SyntaxError("key required");
    return new w(t, n, r, A, T).encrypt(e).result
}

function R(e, t, r, n) {
    if (void 0 === e)
        throw new SyntaxError("data required");
    if (void 0 === t)
        throw new SyntaxError("key required");
    return new w(t, n, r, A, T).decrypt(e).result
}


// N=[228,148,248,139,221,33,249,199,30,135,243,134,170,54,244,173,195,116,43,82,35,213,111,93,126,23,251,20,6,158,63,34,247,154,131,8,45,31,172,83,6,199,86,227,92,222,55,9,68,60,19,120,140,204,21,213,48,163,204,154,29,209,215,238,46,237,20,123,138,8,181,32,217,124,205,212,31,80,48,237,236,48,83,240,172,105,241,183,51,29,62,50,138,16,190,246,161,214,203,1,139,16,194,171,102,67,110,248,247,135,94,79,193,251,122,222,207,234,193,53,65,119,114,1,103,99,221,167,111,62,172,164,166,156,154,41,188,33,117,131,216,121,55,224,56,22,43,96,71,58,226,88,179,153,74,65,92,36,17,183,103,106,174,23,155,22,167,197,90,134,191,196,156,243,25,180,145,11,22,52,71,132,101,162,191,219,120,68,17,52,75,158,28,221,32,222,25,193,43,151,151,45,78,6,188,100,169,80,252,138,219,172,172,202,163,83,196,210,155,125,66,163,227,38,164,137,223,210,31,180,189,197,57,91,166,254,138,42,60,123,213,16,64,27,202,102,227,57,124,64,167,213,210,185,107,223,201,254,154,5,141,124,80,238,184,187,205,40,227,135,133,19,230,179,114,96,130,21,211,201,144,7,219,132,34,142,5,111,23,135,96,170,233,24,146,145,137,101,11,245,201,69,58,111,17,197,251,155,249,235,194,245,37,252,177,97,123,205,65,50,219,238,97,120,163,106,37,24,229,242,219,46,21,120,156,48,196,152,220,70,213,172,194,52,26,49,76,212,98,191,205,44,156,223,181,2,137,110,107,65,5,74,5,246,28,86,125,91,71,81,50,42,188,147,194,162,215,233,243,28,33,150,85,161,227,227,227,186,157,81,107,84,220,76,162,224,101,243,56,209,84,195,60,199,36,177,222,208,103,102,122,136,1,234,128,172,200,212,231,191,96,169,234,158,157,232,251,211,74,2,92,196,61,154,51,239,178,117,188,187,81,113,36,36,67,216,49,23,184,30,55,58,70,250,74,232,150,223,153,146,210,178,164,165,140,196,187,244,151,165,223,166,243,199,87,220,98,128,184,72,216,239,87,235,54,238,76,128,162,166,29,240,92,187,34,75,121,189,181,232,119,94,58,159,54,169,62,229,140,208,250,191,48,51,189,141,203,42,229,212,154,220,43,3,195,8,53,203,251,106,83,65,62,198,36,207,111,227,192,147,83,134,33,208,31,73,205,48,248,219,182,223,231,199,57,226,170,19,17,81,157,109,171,2,101,17,48,26,73,150,78,211,237,39,99,25,77,219,230,10,170,82,18,121,244,156,111,158,58,121,50,198,158,87,96,83,166,249,25,90,89,231,41,4,198,159,83,104,20,4,158,183,110,89,234,183,169,145,206,66,1,192,119,79,112,81,135,14,218,65,20,32,139,148,141,252,70,92,45,225,17,3,43,85,170,50,92,19,134,228,16,44,14,97,234,87,3,233,219,246,220,153,146,235,225,57,98,3,148,224,54,64,39,164,58,67,235,122,230,60,93,65,46,210,135,85,165,241,109,63,90,9,42,217,206,169,68,115,159,233,211,189,249,75,125,223,129,238,105,123,33,4,140,226,111,90,124,250,19,15,173,11,52,252,141,32,128,19,38,51,85,247,176,184,248,103,132,225,175,36,209,13,121,148,4,168,161,9,233,222,218,160,154,38,239,254,181,102,7,17,162,77,207,149,10,160,111,123,80,77,235,222,6,238,24,70,152,206,151,7,47,116,137,193,89,236,68,0,178,187,209,125,252,11,226,143,11,87,117,171,151,200,4,48,22,147,213,50,177,115,140,120,43,121,155,184,5,98,207,214,22,123,212,130,36,159,220,145,190,167,250,154,183,242,31,31,95,56,130,55,172,160,205,121,145,233,222,41,230,112,193,18,72,127,133,211,211,95,78,196,105,187,58,1,41,135,159,130,40,176,154,215,172,153,88,159,161,238,50,181,173,96,51,159,245,59,135,157,47,240,130,216,190,56,48,59,131,255,85,140,138,221,199,251,158,239,86,191,214,78,184,16,131,182,126,145,31,198,85,103,172,17,179,83,85,204,18,118,25,136,235,248,193,17,220,6,249,86,167,13,47,58,198,155,75,141,153,207,254,95,171,5,170,18,247,79,201,58,76,175,27,253,213,2,132,7,85,255,101,158,98,94,127,187,253,192,66,169,93,254,51,130,252,51,19,185,161,220,134,238,140,3,175,198,205,48,13,156,19,84,145,47,230,47,202,161,45,166,165,100,43,93,76,142,67,100,72,11,126,116,159,253,66,253,93,91,146,11,231,205,234,34,217,243,14,238,150,115,212,22,85,52,95,114,7,181,13,38,254,101,140,22,217,47,11,32,31,243,14,199,153,238,127,216,112,14,77,209,179,91,229,90,4,177,92,90,112,219,6,210,238,200,4,162,87,112,220,172,234,150,226,136,128,228,103,170,162,71,37,172,112,230,36,155,134,42,123,14,175,195,55,157,190,14,73,84,121,141,138,54,19,87,201,95,131,140,242,229,234,148,3,86,18,38,229,227,207,40,199,2,246,27,16,100,176,206,132,213,165,5,22,47,227,139,3,147,124,230,141,65,250,172,208,2,243,193,14,6,143,212,187,230,49,156,19,81,218,226,181,139,221,19,211,175,76,244,198,189,226,236,10,113,218,249,44,46,200,172,118,206,7,1,255,115,146,159,154,110,246,214,173,222,163,96,5,69,189,59,218,220,253,162,23,178,119,67,40,35,116,117,81,187,56,126,246,41,52,19,10,248,46,16,146,20,57,223,41,60,89,106,123,40,166,246,200,9,50,253,57,89,144,54,0,55,225,103,56,206,12,168,235,65,11,133,118,152,140,10,158,168,57,0,156,185,178,136,237,237,136,22,209,18,1,29,81,226,92,182,23,42,231,223,241,16,84,174,209,22,228,150,133,114,151,200,155,149,100,101,237,253,227,216,11,99,56,186,121,243,116,205,239,252,187,96,129,99,143,49,123,16,3,86,159,169,158,224,136,42,77,87,85,192,222,92,249,102,112,44,233,32,135,186,44,220,43,40,120,173,183,194,90,143,139,232,185,96,55,88,140,19,190,218,82,105,122,187,128,208,176,117,145,71,225,190,164,163,17,223,194,148,251,81,30,153,55,4,40,216,124,157,246,132,49,20,69,237,3,230,132,0,229,195,126,95,101,226,69,30,236,7,98,247,7,154,144,140,83,232,223,72,20,253,217,1,80,94,137,158,205,140,171,176,197,173,65,177,192,96,56,255,5,58,115,74,52,177,51,197,114,181,119,254,125,145,116,2,17,255,130,4,7,185,50,230,3,247,26,40,44,146,117,44,19,208,41,253,211,187,229,183,1,178,80,170,25,107,65,35,17,248,177,205,246,152,125,88,108,36,249,36,20,134,145,44,218,211,66,34,127,115,182,179,111,197,252,65,254,98,202,250,94,113,217,202,249,208,26,220,121,16,128,141,183,159,242,57,70,41,201,226,164,123,104,73,149,172,193,37,152,118,0,10,153,154,188,61,237,203,29,215,92,210,45,91,127,77,226,183,71,250,224,135,67,131,15,63,141,88,69,195,175,81,60,72,16,198,74,158,25,34,125,189,59,158,127,221,83,168,47,137,243,88,149,65,178,236,139,93,143,104,194,223,10,141,100,18,125,104,205,2,122,32,132,54,188,32,236,194,161,114,102,135,254,29,134,188,189,61,168,13,64,30,77,32,19,0,218,208,87,102,136,74,155,166,130,248,15,164,145,223,189,59,170,6,102,219,68,227,112,201,41,161,165,8,36,54,49,179,186,190,119,167,163,26,146,234,223,16,71,115,60,85,18,127,149,123,254,36,125,207,4,127,117,0,100,227,113,213,159,249,70,134,18,133,14,65,228,162,153,134,209,104,77,116,101,105,109,46,150,175,183,15,191,128,112,99,225,219,10,66,39,105,35,226,192,161,193,154,116,218,250,135,80,31,165,242,99,33,204,147,17,218,207,133,236,220,213,104,169,91,92,88,158,9,179,189,251,45,192,211,154,132,95,134,55,92,134,74,154,162,87,249,5,115,184,166,110,41,227,30,26,24,38,15,167,216,120,156,38,169,231,134,2,243,16,239,34,143,83,20,197,117,45,9,253,44,153,30,207,9,63,31,163,49,250,149,53,150,252,232,56,112,196,142,14,181,233,222,130,124,32,33,187,169,209,244,85,219,152,141,133,161,125,80,219,202,4,247,148,2,46,213,12,121,83,28,162,205,232,220,143,110,53,67,41,233,1,226,137,6,29,63,112,65,45,185,170,71,2,220,87,103,118,24,37,20,14,72,70,229,131,102,113,59,174,199,86,14,79,237,251,84,5,46,171,31,244,53,181,168,246,32,94,197,225,165,41,141,223,129,22,74,222,214,188,102,190,223,188,165,212,48,104,121,241,96,58,236,239,201,42,97,19,203,150,4,191,243,44,136,224,7,77,62,37,236,206,224,79,135,162,188,212,225,26,16,63,49,55,251,46,171,243,156,84,134,82,233,186,132,63,3,123,115,221,124,2,154,122,52,35,169,212,91,82,191,75,60,94,55,136,34,221,206,162,130,217,8,1,102,71,127,160,78,189,252,45,131,154,9,13,225,56,30,90,159,112,195,104,86,189,179,15,41,167,184,109,156,1,130,100,216,57,47,16,145,193,96,33,33,101,126,17,46,244,182,55,128,154,56,244,178,193,140,156,32,190,157,184,86,141,251,107,227,210,229,55,4,27,145,201,185,29,100,50,163,103,107,110,197,17,209,174,87,219,196,13,195,127,150,193,235,189,76,41,230,173,78,77,130,151,171,102,4,17,168,224,36,96,118,242,36,112,147,206,164,55,172,247,149,61,27,1,253,18,71,203,191,147,138,224,52,104,35,13,70,29,14,115,168,28,203,187,223,233,77,104,178,79,70,0,57,89,18,253,226,211,234,199,166,198,243,206,169,36,145,42,18,71,127,125,239,0,159,146,161,9,58,160,252,7,80,71,1,24,165,11,213,111,251,76,6,72,149,150,128,249,83,153,227,72,157,138,76,126,197,204,80,224,230,189,203,133,66,5,32,8,0,66,113,161,238,184,71,202,176,249,206,185,0,57,47,148,32,110,130,248,25,219,174,108,21,86,11,151,57,133,57,14,54,213,82,154,96,33,161,105,71,10,61,25,211,53,98,43,34,29,119,170,195,163,139,180,51,134,100,235,93,178,127,166,21,26,220,224,219,20,196,52,133,60,253,230,201,183,92,204,154,102,53,164,101]
// x=[80,181,178,16,134,177,163,17,2,222,71,132,228,239,196,96]
// L=[37,145,220,168,243,112,126,238,243,4,122,229,185,255,202,87,197,164,64,11,3,109,112,134,4,55,23,136,244,177,154,134,50,87,156,142,216,62,214,66,220,36,153,37,25,233,91,12,149,159,11,225,63,95,246,141,21,209,37,149,228,14,143,84,147,146,82,195,46,190,243,3,108,107,173,217,54,135,115,76,88,228,147,89,200,164,72,236,219,98,227,34,39,103,98,50,112,212,187,252,244,116,80,209,84,63,38,164,3,42,190,212,97,80,27,81,236,56,150,88,78,224,59,61,60,212,171,99,95,194,45,77,15,213,13,73,45,193,18,94,163,89,40,214,27,99,182,152,135,118,56,154,11,187,11,61,73,25,251,93,252,239,149,219,146,185,233,118,191,204,64,206,119,228,243,41,124,1,214,24,4,190,67,137,130,32,234,232,137,134,26,63,241,25,203,50,228,38,8,126,238,27,19,155,210,62,69,201,228,124,132,117,26,148,20,142,58,189,199,32,160,163,146,241,17,38,62,143,108,83,198,193,167,188,133,61,135,49,94,120,231,31,65,0,205,177,94,6,202,11,118,242,229,202,166,206,177,18,101,142,84,39,26,35,219,210,140,60,110,30,104,128,129,100,60,210,19,132,103,131,155,157,124,198,222,77,15,14,231,6,28,136,244,132,94,102,211,220,128,214,188,167,243,245,119,89,244,228,245,106,201,132,80,13,247,128,29,118,24,26,37,225,109,231,244,75,80,135,170,19,37,62,223,183,251,219,5,46,133,194,105,17,127,165,15,94,183,65,26,116,249,17,83,29,140,95,39,124,109,28,68,89,48,5,28,40,176,209,180,232,240,27,202,125,189,5,136,1,53,199,245,198,195,232,160,107,86,139,12,226,244,199,124,241,255,184,92,191,43,187,90,192,199,6,78,81,208,179,150,216,107,110,90,99,125,185,103,71,233,135,83,58,43,159,64,88,230,91,17,187,136,131,207,48,34,219,28,26,149,132,109,27,98,251,105,87,137,235,22,52,68,1,222,247,104,120,51,99,214,21,21,23,119,158,143,139,192,109,130,52,123,137,80,230,217,62,74,244,78,172,179,129,47,239,158,150,113,241,250,130,139,67,80,193,74,107,179,74,229,17,177,150,18,30,76,92,203,187,127,93,23,233,132,19,211,203,15,163,18,71,169,208,127,247,253,4,7,248,54,91,66,188,206,147,241,33,90,248,190,221,132,158,218,117,182,89,150,87,26,206,156,83,55,249,120,230,133,204,35,233,171,108,230,242,21,228,211,124,222,185,116,99,103,165,97,243,70,0,87,51,71,76,132,160,175,71,250,189,16,159,249,152,170,192,93,46,21,63,92,105,194,59,165,78,93,31,12,126,69,117,54,249,87,179,39,104,200,181,129,84,222,216,253,93,218,74,88,119,178,74,176,169,71,15,236,92,238,161,215,3,72,13,208,47,78,155,111,26,240,130,138,132,228,45,239,246,212,70,53,74,142,110,169,168,91,207,8,118,243,193,70,140,17,31,82,9,170,195,66,235,12,193,8,80,162,156,66,248,234,183,204,238,46,145,195,19,140,192,82,167,41,32,82,170,166,101,223,192,2,149,184,220,43,103,139,221,52,172,125,107,236,103,193,142,23,40,80,232,135,112,203,40,47,147,234,197,101,80,82,208,124,6,29,108,61,61,222,72,23,166,136,93,124,120,253,206,147,38,5,79,143,151,243,34,223,218,64,86,233,124,169,95,78,17,146,197,253,232,128,169,172,137,193,172,106,61,197,97,141,30,244,124,208,233,241,129,151,115,230,97,224,52,89,171,68,224,159,111,10,204,202,35,49,198,138,1,21,93,183,235,91,64,187,4,63,50,153,80,158,88,143,169,104,51,200,31,145,250,52,67,5,176,164,39,68,148,163,60,64,73,48,219,178,34,205,184,86,209,159,110,203,104,174,216,144,137,89,229,23,137,216,37,78,182,161,100,128,48,164,88,90,191,151,252,220,201,131,149,136,234,128,86,163,180,11,149,218,72,57,44,154,136,236,55,31,232,157,84,199,126,139,203,249,72,5,219,105,157,123,114,31,23,233,94,139,100,14,154,77,91,87,174,199,60,118,236,243,125,184,24,198,209,77,173,180,27,23,42,102,148,164,24,166,223,127,199,17,31,55,227,248,168,172,153,43,71,33,76,145,248,83,184,227,114,49,58,189,87,227,254,36,42,207,56,220,14,163,65,23,68,92,10,149,135,65,167,211,111,132,87,22,82,30,233,96,119,40,10,100,82,174,136,216,84,90,1,239,67,155,5,199,28,116,49,224,102,126,96,166,241,238,22,91,37,214,57,87,16,124,85,47,114,143,136,82,45,255,69,102,234,184,155,81,56,54,158,171,138,52,212,197,4,196,19,125,25,66,254,187,105,138,11,135,57,115,148,167,207,6,168,0,26,182,136,243,143,237,168,183,213,220,45,192,131,237,232,177,169,27,217,175,120,131,21,217,127,102,172,166,9,1,40,85,175,19,134,108,48,209,68,114,13,5,126,237,237,45,55,0,139,245,174,224,179,201,147,50,37,146,179,33,242,94,16,210,165,176,103,246,76,182,80,93,200,15,230,129,215,199,95,170,212,25,208,168,239,239,77,244,150,37,41,132,162,2,202,69,215,115,159,145,59,93,70,106,104,149,234,235,208,90,64,159,15,16,139,211,94,139,73,188,134,109,143,72,175,124,240,159,160,232,174,171,159,46,151,162,37,100,174,34,218,93,6,180,191,236,90,96,92,233,205,163,181,241,127,255,167,32,96,102,253,17,91,61,40,131,152,183,18,123,21,89,136,112,154,197,176,233,48,239,55,207,33,83,210,39,109,190,54,249,250,158,192,38,232,24,159,96,84,14,218,20,71,176,174,38,226,9,127,124,175,133,42,166,170,97,161,15,72,54,130,224,177,65,206,107,231,230,92,221,147,240,176,185,93,171,191,221,34,82,18,113,71,242,56,210,188,21,131,146,75,164,15,221,99,127,43,193,222,132,26,84,78,10,1,131,18,189,176,242,180,103,229,131,102,166,173,111,122,92,156,108,170,180,230,97,223,70,52,187,40,182,212,1,140,71,181,216,130,234,187,155,74,204,63,228,78,10,23,44,110,201,243,179,110,163,50,137,42,58,48,136,212,36,10,252,66,124,62,70,177,122,209,136,104,186,230,12,68,104,26,44,56,221,167,106,102,174,34,181,108,124,129,44,91,225,136,75,107,192,129,145,248,156,126,206,222,10,197,232,17,136,15,192,127,126,6,246,161,230,69,66,25,125,63,31,177,188,165,209,36,118,30,173,75,8,14,172,254,157,164,168,243,199,14,189,251,109,58,146,211,26,22,144,20,90,10,88,105,161,254,19,141,204,219,131,29,153,131,189,64,197,207,6,95,85,89,181,55,74,79,33,50,186,186,242,120,88,89,64,167,134,98,177,87,240,52,38,115,36,125,141,144,105,102,173,109,28,202,66,10,92,92,196,153,196,178,94,21,49,60,183,226,53,249,66,88,62,32,199,62,248,160,244,185,99,5,140,77,30,159,219,70,211,242,193,69,170,244,222,167,176,74,32,164,14,44,30,147,172,60,17,245,168,16,29,211,225,110,238,204,48,107,208,135,38,5,86,246,159,232,149,219,8,45,206,105,42,250,167,207,45,238,207,12,188,63,38,175,89,209,139,181,212,246,246,72,213,79,61,138,164,105,119,172,25,92,213,151,97,63,2,205,214,53,167,79,237,201,221,38,9,65,134,172,14,26,236,38,44,37,128,244,211,86,202,147,174,172,139,166,204,77,142,234,204,58,163,196,28,190,7,95,107,87,169,41,60,71,60,36,137,62,193,5,116,12,197,227,58,171,94,223,22,228,176,3,100,247,100,168,82,139,192,236,56,183,216,214,63,216,15,34,162,163,231,157,200,81,24,14,163,25,88,89,166,157,254,211,46,32,126,221,234,173,225,233,46,67,86,198,184,30,124,249,199,132,88,243,169,59,172,160,17,100,4,167,136,192,123,210,52,241,85,143,40,218,205,207,97,15,74,60,72,82,92,171,158,131,95,95,190,147,52,238,117,69,24,134,110,164,118,147,194,204,84,147,233,254,112,52,82,95,246,85,3,214,20,212,213,97,249,243,117,13,166,146,64,255,184,211,77,117,200,121,198,163,236,216,117,64,252,65,243,236,59,42,132,36,18,194,67,78,13,239,136,208,242,108,95,165,17,112,129,157,207,12,118,87,0,109,249,215,104,88,102,134,108,186,127,52,76,97,58,188,4,231,149,202,156,220,37,210,13,119,211,201,81,229,46,32,248,51,153,245,214,172,74,36,162,254,232,252,131,192,82,88,181,25,61,87,48,155,121,103,88,51,134,107,170,163,12,239,206,225,49,41,14,142,134,192,95,35,80,131,202,177,106,136,116,107,146,148,246,160,73,164,108,68,39,191,171,41,141,205,181,209,76,34,205,126,225,186,44,98,182,213,36,71,44,239,190,147,56,6,179,143,182,70,236,61,138,232,59,209,25,103,124,215,192,239,80,89,3,50,84,220,99,250,252,101,7,164,131,228,16,164,107,45,81,101,167,65,201,12,102,175,145,233,67,253,110,165,113,93,176,143,218,99,213,80,138,30,197,34,79,79,127,255,216,67,44,22,57,214,10,195,190,150,93,130,164,126,213,115,253,167,194,0,211,109,40,154,7,235,193,63,212,55,166,215,1,166,124,100,222,105,151,9,24,10,142,192,128,180,183,183,88,37,182,128,20,36,15,86,173,157,115,253,214,194,61,225,43,185,132,45,89,78,75,34,147,221,34,251,54,168,36,131,36,107,19,46,37,249,207,8,197,58,141,97,126,229,79,222,7,97,11,70,24,185,52,51,214,79,198,184,161,20,16,7,88,207,93,224,149,125,164,106,59,242,7,161,79,15,75,243,232,183,204,36,248,130,158,123,66,151,250,254,62,140,36,102,205,199,249,187,30,87,47,208,181,93,124,118,60,42,140,128,201,172,136,43,12,198,89,87,117,180,207,153,98,154,10,44,199,131,32,176,152,23,199,127,100,80,51,134,245,41,14,182,155,129,16,168,92,204,207,243,16,124,238,202,201,157,180,89,46,62,123,224,204,203,201,202,199,135,185,193,113,190,18,112,88,222,189,176,70,113,175,67,113,235,117,73,59,154,157,246,99,236,98,150,235,174,237,250,182,254,134,14,14,196,239,146,175,102,105,207,16,40,47,78,60,108,1,241,151,112,48,32,164,12,162,134,93,82,91,127,92,172,244,119,159,27,141,241,152,197,111,136,182,241,120,245,84,173]
//
// e = new Uint8Array(N)
// t = new Uint8Array(x)
// r = void 0
// n = new Uint8Array(x)
// L = I(e, t, r, n)     // AES加密
// console.log(L)
//
// out = R(L, t, r, n)    // AES解密
// console.log(out)


function get_sss_to_L(sss, key) {  // 获取请求加密参数 sss -> b -> N -> L
    b = m(sss)      // 字符串转ArrayBuffer
    N = get_b_to_N(b)   // 压缩
    x = base64ToArrayBuffer(key)
    L = I(N, x, void 0, x)     // AES加密
    // return L
    return Array.prototype.slice.call(L)    // ArrayBuffer 转换为 Array
}

console.log(get_sss_to_L(sss, key))

function get_L_to_b(L, key) {  // 获取返回结果解密后解压缩 L -> N -> b -> sss
    L = JSON.parse(L)
    L = new Uint8Array(L)
    x = base64ToArrayBuffer(key)
    N = R(L, x, void 0, x)     // AES解密
    b = get_N_to_b(N)   // 解压缩
    sss = v(b)      // ArrayBuffer转字符串
    console.log(sss)
    // return sss
    return sss.toString()
}

// get_L_to_b(L, key)


// key = "flmMBX/21xj75oCUMFM/eQ=="
// L=[215,203,201,140,24,166,245,3,16,168,107,197,6,187,133,174,128,71,240,240,50,248,89,54,127,236,122,172,14,61,200,252,148,19,178,252,152,228,117,195,76,53,202,104,126,46,111,166,228,114,170,208,75,247,62,176,77,65,6,226,152,108,146,252,172,93,248,248,106,140,18,255,181,10,13,181,174,86,25,250,37,204,52,93,185,118,74,122,46,219,177,180,124,157,94,57,255,238,160,110,101,128,60,241,93,72,192,239,9,180,160,23,220,123,22,160,172,169,137,204,0,208,224,133,68,201,246,119,141,209,235,237,36,188,227,102,97,31,207,39,104,98,48,141,200,90,225,153,33,103,172,228,39,227,145,9,57,191,84,95,80,196,227,49,168,65,106,231,59,164,60,244,165,52,142,54,157,105,172,60,164,118,13,94,76,227,56,155,184,168,36,246,130,246,58,133,198,176,67,206,154,130,74,33,181,168,22,246,155,229,81,246,113,92,48,40,194,211,203,115,224,248,20,41,23,79,56,169,161,144,119,35,178,108,146,162,159,84,168,27,37,113,212,255,2,148,236,0,12,126,103,21,3,74,201,44,127,75,12,139,112,202,153,174,82,228,115,90,97,248,151,73,255,189,121,224,219,150,144,134,44,160,66,22,75,83,157,247,138,249,155,159,81,102,55,74,34,158,36,71,90,5,235,19,158,84,249,246,192,224,224,245,104,167,252,201,163,171,130,141,24,192,43,208,168,18,224,68,18,144,247,127,154,27,143,81,108,227,102,193,62,169,112,71,206,51,217,167,26,228,49,180,15,114,231,103,185,205,119,73,20,30,166,72,157,151,213,69,238,212,217,253,36,223,185,154,120,198,73,81,96,31,111,197,199,85,159,62,176,125,213,202,99,94,119,82,236,210,70,148,143,64,132,208,53,202,14,62,108,241,58,233,26,91,221,140,54,81,101,199,56,160,220,29,207,62,118,28,3,45,205,28,4,80,164,23,1,207,68,12,122,136,55,221,248,136,44,100,199,159,215,120,14,186,202,226,3,82,39,82,76,121,93,18,193,142,8,16,166,112,61,125,255,53,40,139,30,81,250,187,215,57,143,244,152,24,170,202,18,81,223,157,156,215,52,57,211,63,35,162,141,40,147,53,241,49,76,182,90,255,27,78,228,149,205,227,235,93,7,214,163,210,23,25,247,33,12,29,236,234,139,23,58,10,200,76,215,218,247,29,144,208,117,94,198,229,123,189,182,63,2,16,91,160,209,66,249,50,50,232,21,62,125,11,137,213,83,255,52,148,140,130,172,215,153,228,13,120,133,184,33,216,14,15,92,249,9,214,215,181,250,144,143,54,107,12,66,23,32,178,228,72,121,57,11,79,60,216,254,191,228,197,123,63,80,217,63,118,136,11,160,212,5,37]
// L=[203,230,252,56,43,164,229,53,44,7,243,144,92,79,94,69,148,94,17,166,212,41,74,228,194,89,168,115,50,88,115,116,36,101,83,149,109,213,183,197,231,241,157,27,72,88,33,141,153,136,94,190,66,227,121,105,111,194,94,9,65,144,216,22,121,199,195,196,119,17,177,251,242,167,52,9,224,79,253,193,148,75,211,60,55,221,133,250,254,56,87,105,101,89,158,144,188,212,1,130,41,247,189,183,85,64,68,8,216,188,232,115,189,90,49,126,212,91,20,120,47,150,191,196,152,112,177,43,31,128,64,224,109,241,158,166,172,110,174,42,200,212,205,186,129,137,27,108,92,119,102,25,166,30,143,163,194,74,160,71,241,87,185,78,193,78,158,60,3,100,93,159,70,127,237,126,142,30,21,78,181,13,232,52,89,96,247,203,14,116,189,46,178,81,206,64,176,49,164,136,28,122,32,226,100,98,231,180,42,12,92,55,111,97,136,89,243,19,105,95,237,164,95,70,191,58,29,21,24,200,123,10,53,98,148,18,240,116,112,187,78,154,246,105,36,129,85,44,250,24,160,60,105,217,141,49,175,33,79,29,100,197,107,29,201,0,132,12,230,174,170,63,109,97,162,179,136,50,98,4,205,26,53,165,153,158,104,244,33,68,5,50,107,133,236,192,43,160,194,4,236,36,131,168,130,66,33,51,67,61,232,9,240,14,79,203,212,166,178,224,119,101,5,153,189,164,162,100,26,76,69,227,42,109,76,192,150,219,184,10,78,49,83,135,20,181,165,224,225,157,87,193,179,51,41,242,27,21,27,34,95,114,225,213,93,120,34,143,208,94,28,122,204,50,96,169,155,151,142,16,242,200,163,157,131,230,154,58,10,13,167,63,18,201,193,215,120,116,180,104,46,24,157,86,95,81,185,46,27,190,194,247,120,115,149,88,214,163,141,102,127,28,25,160,206,21,73,159,132,209,67,166,180,158,194,159,103,29,156,216,8,238,235,27,33,139,76,21,250,231,221,176,119,116,13,71,28,223,73,221,169,187,35,7,145,34,141,145,156,233,146,62,135,176,123,174,166,128,41,80,66,58,145,102,27,251,191,242,193,24,169,86,199,225,132,17,231,18,27,200,42,205,37,201,99,224,231,82,106,21,9,47,115,189,197,46,163,18,108,163,84,121,109,22,48,173,224,185,31,59,7,66,233,223,142,55,84,51,112,228,113,33,98,86,167,209,83,246,47,105,252,34,224,195,180,94,131,42,198,20,244,112,184,223,232,95,185,224,159,122,166,189,45,197,37,227,158,18,147,134,15,171,227,73,167,233,33,198,248,70,142,197,72,216,187,170,172,49,178,107,21,23,148,211,198,165,196,66,226,135,83,248,115,179,168,206,221,25,17,16,123,223,93,222,113,89,16,35,124,62,92,12,27,121,130,239,104,194,145,19,160,155,245,98,240,9,106,69,123,113,49,193,54,4,181,67,137,167,80,71,77,5,219,220,123,119,33,202,163,228,244,72,123,85,175,92,172,182,101,183,211,44,150,119,29,157,212,105,205,153,193,148,193,250,219,31,131,72,225,29,173,25,143,147,19,26,43,48,200,185,73,190,178,142,96,39,125,95,5,248,235,187,139,23,159,6,13,136,242,234,31,11,75,97,178,133,129,202,63,85,156,204,190,39,200,39,189,198,170,68,40,140,111,172,24,85,137,247,106,85,69,63,17,233,20,246,247,232,108,143,180,118,250,218,58,119,124,225,32,200,156,229,149,172,57,34,164,15,91,78,33,65,219,125,224,212,153,5,234,11,124,200,241,88,238,71,128,95,2,207,214,75,19,169,104,40,104,238,196,56,146,126,102,105,183,29,41,129,228,59,239,12,253,194,195,126,171,146,101,63,136,64,165,171,217,118,69,215,56,216,56,52,130,132,127,75,179,100,184,75,214,80,92,122,78,124,31,187,54,156,240,206,206,135,234,67,54,115,3,216,253,229,19,50,166,97,146,228,82,195,155,185,169,15,153,245,170,73,208,213,216,205,139,117,195,118,212,124,111,20,52,55,176,133,183,123,41,24,243,69,55,148,163,227,172,207,28,135,70,106,243,122,236,155,101,123,247,108,17,73,215,197,13,231,217,229,169,50,243,84,53,124,154,98,112,199,158,206,240,20,251,32,201,202,72,183,23,235,215,253,7,148,152,219,250,123,97,177,5,121,145,14,115,52,156,1,104,15,232,168,14,18,57,13,154,240,17,29,178,28,238,128,187,169,169,164,81,250,189,38,228,114,209,105,1,40,92,61,134,151,219,192,179,40,255,53,21,136,74,69,176,145,59,148,248,100,185,82,124,216,233,153,149,55,125,232,136,33,59,42,138,254,182,17,72,169,225,65,14,113,199,59,40,238,12,182,142,223,3,76,254,92,73,80,143,160,114,100,27,163,66,238,55,36,8,125,114,103,86,237,152,19,37,178,210,173,201,65,122,177,74,214,137,91,76,102,202,20,216,184,250,1,38,126,183,179,172,43,185,52,187,7,58,33,3,136,77,8,146,78,132,54,28,105,31,166,224,26,41,183,164,207,62,134,179,219,10,136,10,18,19,171,22,127,122,67,177,219,167,56,24,47,25,244,87,167,35,127,92,20,133,124,222,86,15,182,196,165,81,107,165,204,118,191,43,50,166,221,198,55,219,213,80,75,18,109,46,175,109,231,50,47,152,179,59,200,1,42,171,119,49,21,1,139,234,58,227,126,78,129,17,103,64,204,96,72,231,107,102,181,250,79]
// // key = [206,104,45,58,167,171,171,234,13,233,216,29,159,188,71,214]
// L = new Uint8Array(L)
// // key = new Uint8Array(key)
// get_L_to_b(L, key)
//
// console.log(base64ToArrayBuffer("TmrovsmMcohU+v3n1fFMmg=="))

// i=[9,102,143,95,7,156,45,241,74,71,33,132,21,108,238,139,74,111,55,226,251,167,75,145,172,114,141,236,184,84,168,43,31,222,110,97,190,87,93,252,105,39,111,192,2,192,215,185,184,95,134,61,185,210,226,136,158,174,186,94,158,16,107,78,20,202,147,105,185,40,76,0,103,56,210,31,31,199,139,45,171,85,90,35,118,8,146,226,17,75,148,125,120,173,206,103,243,135,106,42,76,39,227,194,166,15,142,252,2,152,234,244,172,58,150,207,34,189,211,10,91,204,22,30,153,74,191,66,206,216,247,203,133,54,244,57,134,124,186,101,205,119,57,232,202,54,219,189,17,164,194,242,243,231,71,174,66,44,160,66,159,142,182,210,145,112,89,123,204,77,87,64,191,152,198,55,137,95,169,47,17,90,135,60,41,193,8,185,160,240,126,32,134,173,160,61,119,179,221,217,162,12,156,173,63,4,170,242,152,107,71,7,188,239,60,28,212,21,129,41,214,87,35,238,63,103,21,120,111,105,161,7,13,60,158,146,26,174,139,188,210,137,60,34,66,216,94,135,232,43,231,14,219,245,54,203,243,93,82,117,132,104,88,63,254,155,239,207,41,6,52,39,31,125,115,78,73,224,25,169,92,49,226,56,56,157,136,33,248,190,182,251,82,135,71,236,230,205,227,165,51,239,56,43,222,116,82,192,181,171,109,18,0,153,3,24,22,212,32,127,106,139,52,190,172,178,195,152,106,73,35,75,24,219,63,233,169,235,16,69,108,247,129,114,78,182,64,210,202,22,203,125,5,198,81,112,35,61,55,116,117,164,201,64,45,110,129,124,220,185,78,185,245,230,245,91,23,0,43,178,236,51,197,62,55,40,44,46,9,47,83,5,37,221,22,68,53,162,10,71,91,175,174,211,194,204,134,182,241,184,89,113,115,59,142,37,133,15,144,62,248,91,68,190,25,11,168,93,214,109,114,190,123,216,174,172,148,123,24,222,90,59,247,231,166,248,218,199,109,204,242,175,14,111,168,130,221,236,43,108,35,144,13,203,89,22,80,147,217,254,151,175,82,49,181,85,232,218,127,14,161,76,136,248,141,65,213,43,5,13,20,177,54,180,75,154,247,220,70,188,158,196,42,231,132,96,207,71,128,140,18,220,59,135,103,93,190,167,246,169,234,126,233,234,112,11,115,49,140,146,238,64,230,149,27,231,145,228,23,184,70,62,28,152,157,78,44,86,162,225,173,20,146,228,32,59,143,127,95,99,146,219,180,41,197,55,209,91,171,170,141,134,75,151,48,225,60,15,233,68,164,9,174,217,64,144,197,136,5,167,45,198,3,211,249,152,54,245,6,69,64,197,14,123,114,197,80,242,141,180,98,44,209,132,179,73,124,208,146,2,115,230,63,0,255,167,157,8,31,110,184,219,124,33,24,124,69,248,248,81,247,167,180,168,78,67,167,196,172,203,230,95,176,58,48,200,205,143,90,29,163,109,124,94,41,74,229,70,110,98,124,167]
// i = new Uint8Array(i)
// get_L_to_b(i,key)
// data="ICANStd8SswgJPxuxNPbrfp8QOvUeTozdGu8JndEzsaEzATp4uiZiSPX0aE5O4ZVHA6+u7Zg4nfRG0IsnG+dtwbmrIUO+KZAYltome7U+EQ="
// encryptKey="CgxOmV4Hqns8yV5tWYMRiAiz3cwz3FUG5I4kGRa/I5dey1lCk6VcmZdtSRZ4sVUguTC6T2SAUMNQ1JD+suD8rxT8MJtp98fO40GIQOGwpEaVqHIwTv+PPrpL7sLZ1L/Fz5MiUaS0u4kySomgOVAdW6wa+vO82Wjn3oLeVJY6eTM="

// i=[19,208,105,110,184,131,116,193,181,99,14,154,212,225,44,134,11,15,128,123,51,241,236,199,83,218,190,132,126,18,42,1,184,195,119,28,215,11,1,96,220,250,67,87,65,13,169,67,213,213,240,28,179,157,164,68,68,38,245,61,188,3,96,127,238,238,152,47,20,208,164,219,110,138,227,161,178,77,144,123,154,158,117,197,188,9,25,160,126,6,40,33,192,111,44,142,180,52,54,215,143,138,32,3,202,39,116,252,133,252,104,155,123,167,23,180,193,169,77,201,230,213,10,5,96,221,86,115,36,184,192,1,11,100,228,37,152,167,65,59,125,145,103,4,241,155,229,207,24,152,163,131,63,205,193,46,112,217,0,223,158,158,51,55,123,144,154,45,0,91,71,221,58,39,177,18,139,110,125,93,164,52,202,32,105,111,244,54,134,10,157,96,3,196,145,99,44,49,131,28,116,73,221,134,136,167,89,56,171,157,193,6,172,34,41,249,25,150,143,17,208,7,180,241,249,159,60,122,144,151,213,237,209,248,169,55,134,85,177,141,210,94,190,126,57,181,93,237,75,40,30,188,162,171,96,108,183,234,97,117,109,203,10,80,148,215,238,241,161,184,8,86,85,33,175,131,184,42,120,115,174,182,170,110,174,239,231,169,214,169,235,104,79,86,135,202,171,137,44,199,165,85,234,220,83,220,176,188,116,71,141,64,89,122,58,68,164,121,115,204,246,145,97,234,244,238,3,115,129,9,23,54,23,245,72,75,48,122,253,24,212,147,243,123,34,7,248,219,50,169,140,184,216,39,171,146,47,80,128,217,169,94,229,193,233,124,108,124,47,124,125,124,13,25,139,65,210,133,147,29,20,8,231,58,79,187,29,239,129,121,206,146,214,152,83,75,81,210,89,254,84,153,83,106,213,85,5,87,146,32,162,34,138,71,229,140,200,125,4,238,179,25,188,210,188,97,6,163,168,231,99,246,113,237,215,35,224,69,17,177,154,236,253,239,222,193,2,196,23,224,236,90,109,147,74,231,158,64,173,1,159,216,115,191,225,29,206,214,58,108,121,108,208,1,198,13,67,221,28,102,167,246,117,241,203,255,37,116,141,181,175,243,180,68,78,26,30,44,120,92,45,113,250,243,35,210,125,140,99,13,55,20,12,198,255,58,164,223,15,178,79,44,74,123,63,125,184,213,221,133,50,113,252,46,208,226,41,105,99,52,237,106,46,114,146,129,234,9,90,90,15,244,182,227,95,27,11,150,11,219,164,154,130,157,1,63,102,110,132,197,250,99,12,44,126,127,3,217,228,242,90,41,155,128,4,80,236,86,194,45,108,232,196,134,23,51,119,116,142,244,20,241,163,222,88,153,31,12,121,51,73,144,234,189,241,48,20,72,141,35,163,30,212,152,30,198,149,9,90,13,52,164,18,163,170,76,161,87,249,203,62,1,104,83,252,217,118,228,146,103,108,164,15,72,9,19,5,190,66,90,43,43,73,8,5,254,121,197,254,106,100,173,76,12,8,122,239,132,250,85,215,50,192,185,95,42,145,92,254,109,153,16,106,75,155,237,242,70,12,52,219,156,94,50,20,160,97,84,162,154,197,155,231,195,10,13,140,162,77,78,243,209,165,210,62,94,5,246,34,128,128,112,229,3,118,72,67,75,11,46,104,137,120,72,153,94,66,121,105,155,92,82,139,195,197,217,116,77,39,186,97,149,140,213,247,138,90,232,121,254,201,120,120,247,161,230,229,101,143,234,127,74,17,231,110,233,110,25,38,209,153,66,251,94,22,87,76,138,123,39,191,167,73,114,135,241,248,64,98,219,57,62,67,101,153,21,54,212,199,241,35,189,180,70,170,231,38,51,0,50,124,243,38,181,20,228,94,51,75,209,179,219,234,21,193,51,219,250,224,197,16,21,116,50,25,239,214,13,247,29,67,255,250,155,134,68,114,158,68,137,27,245,191,150,43,51,16,61,109,218,144,228,93,11,153,209,33,103,240,82,81,47,100,38,157,127,176,5,101,35,254,109,109,225,209,225,23,117,144,39,60,21,144,216,93,121,47,57,77,17,1,228,212,57,44,144,136,97,33,140,152,39,226,227,120,53,8,190,153,130,1,170,156,122,65,186,3,226,25,26,72,55,33,163,19,190,229,230,249,248,245,184,196,46,209,103,182,231,220,78,182,21,118,160,107,159,43,119,29,238,220,66,47,242,104,90,215,37,136,231,108,242,231,3,103,169,181,4,87,139,188,242,1,72,211,168,122,120,78,164,10,225,138,96,243,154,50,23,183,252,31,172,23,3,126,194,132,46,250,71,29,26,17,93,64,13,13,18,253,146,20,95,57,31,246,82,18,240,77,238,252,116,175,85,23,46,250,234,103,254,5,247,71,155,103,233,196,61,11,144,105,141,206,185,57,64,135,40,163,133,167,255,31,150,212,20,150,52,79,142,140,15,229,29,153,201,135,21,59,63,238,222,132,140,201,212,200,17,30,190,229,183,87,97,139,71,217,29,21,45,76,117,119,219,92,170,137,58,60,227,56,142,224,178,53,252,224,173,226,71,96,93,93,90,200,131,254,140,68,68,129,255,148,81,219,235,17,80,154,195,190,51,71,165,9,190,33,3,208,210,71,196,175,98,78,208,194,0,66,234,15,26,113,137,46,89,41,191,184,28,64,202,92,154,219,23,78,175,86,254,48,58,151,225,161,116,111,90,16,26,102,227,22,6,16,10,156,58,125,32,40,199,105,150,160,25,145,181,51,245,35,224,83,30,135,68,62,240,187,52,114,61,186,114,171,68,83,15,221,105,45,234,224,133,98,30,6,128,177,230,166,161,55,198,125,184,201,62,135,106,228,18,159,175,29,216,154,18,63,66,4,67,228,169,182,199,235,163,215,87,55,177,19,28,234,164,252,37,238,28,64,104,73,49,162,118,200,121,7,44,66,254,113,115,22,237,105,209,114,80,117,155,48,163,72,101,8,231,63,252,223,102,233,89,84,169,198,248,116,21,21,105,214,153,127,20,232,174,69,12,194,127,134,94,186,187,148,187,57,122,207,119,136,105,202,167,254,57,153,119,116,91,154,24,84,116,84,223,35,106,115,250,139,236,94,151,86,226,93,219,248,34,244,104,250,186,31,223,235,55,176,186,107,137,219,69,40,174,72,187,4,8,86,60,188,120,55,175,140,41,120,22,169,62,107,7,81,156,42,145,55,37,5,187,240,235,53,90,79,75,227,78,201,17,214,169,22,232,197,121,102,49,89,25,80,54,130,146,24,154,85,149,242,187,235,158,212,136,131,186,147,100,20,194,232,7,94,50,65,130,67,204,219,255,116,32,160,131,190,206,49,2,243,111,159,188,54,222,205,224,176,67,7,172,75,200,160,224,77,7,241,18,129,10,220,37,158,124,59,146,62,182,31,86,84,25,18,70,91,165,133,80,195,129,157,130,60,231,93,202,138,41,210,7,155,147,127,177,203,10,118,69,189,193,163,120,124,231,225,160,214,57,228,159,92,8,251,53,4,192,235,28,41,17,234,161,69,224,163,229,237,185,1,228,139,65,15,147,178,103,44,98,193,171,163,67,100,29,159,64,87,189,121,62,228,90,243,79,11,250,2,244,206,41,57,195,214,110,195,199,22,121,200,125,215,43,49,77,106,104,239,241,134,236,216,229,233,128,40,21,146,200,135,116,4,230,239,129,26,215,34,16,37,138,251,245,1,156,92,226,184,252,65,203,1,50,147,215,163,0,177,177,91,191,47,35,152,158,20,49,167,71,134,141,233,31,4,172,24,27,179,174,54,13,187,152,73,146,218,35,160,143,107,230,247,194,182,134,105,15,48,106,206,172,225,83,231,53,233,117,191,231,157,11,8,164,13,111,39,8,169,34,81,114,153,199,76,157,25,204,70,22,183,91,110,215,214,199,200,95,152,121,124,230,194,104,198,115,70,241,8,178,90,85,81,64,160,172,73,220,31,96,57,119,142,134,131,9,63,95,85,59,35,0,177,14,193,191,181,7,122,255,196,71,52,8,100,100,243,10,72,173,207,200,31,13,126,248,243,106,63,220,105,153,92,25,124,166,244,191,135,149,184,236,228,239,137,106,1,31,162,17,112,86,255,97,212,200,59,76,220,62,4,200,31,126,113,94,86,239,0,6,6,223,206,238,199,15,69,51,195,202,121,167,107,242,225,236,100,220,170,254,80,226,120,173,184,168,12,248,43,152,35,62,66,226,116,172,15,181,153,11,16,183,149,195,121,37,221,116,173,155,107,221,242,163,135,84,142,180,94,67,47,76,23,34,215,219,45,46,171,162,24,45,165,224,201,189,35,185,108,112,208,148,115,161,224,144,248,43,67,159,198,69,248,32,227,52,177,248,129,122,163,17,164,0,244,98,189,185,10,207,37,111,1,186,138,135,138,99,254,36,146,74,136,135,176,145,26,48,143,180,34,210,218,139,59,11,54,229,124,144,47,71,60,70,125,193,214,245,244,58,213,162,108,255,12,124,120,15,135,11,102,132,31,169,34,234,112,87,25,123,133,21,240,209,85,68,85,194,206,19,93,190,133,147,49,110,66,146,94,154,36,79,69,140,92,205,254,238,198,187,78,130,161,14,191,113,119,222,141,62,247,100,248,142,122,200,154,71,138,129,241,228,244,200,92,0,203,224,199,103,182,12,217,117,249,87,54,39,55,64,123,9,63,15,23,117,61,68,13,188,59,28,159,194,145,188,221,72,189,80,192,185,132,185,182,230,62,130,164,130,239,236,111,82,234,47,186,242,82,240,218,135,18,149,63,233,138,144,18,252,196,165,115,226,46,187,95,3,191,90,151,231,119,9,147,252,117,53,194,81,228,197,139,219,86,43,235,36,225,251,219,182,128,27,210,218,99,62,217,175,114,206,219,181,242,208,220,94,221,195,94,73,202,108,224,181,142,190,138,43,171,78,223,84,54,248,2,211,114,92,18,151,135,38,131,189,234,11,146,197,36,8,207,32,206,137,184,26,225,172,147,34,85,65,221,231,73,189,29,47,178,242,190,79,153,136,37,53,65,0,36,239,108,193,224,154,139,240,19,178,1,168,3,241,0,201,98,140,114,198,128,243,111,77,0,87,8,106,228,134,80,217,18,61,174,108,121,92,161,59,22,204,44,249,10,26,230,123,151,159,215,6,91,52,129,11,43,235,52,242,34,101,164,116,177,162,246,111,219,79,221,249,19,66,255,235,137,217,106,213,92,71,193,43,110,207,91,142,19,65,87,107,173,38,116,192,144,203,204,156]
// i = new Uint8Array(i)
// get_L_to_b(i,key)
// data="IiTQ1ygbOwwbL5HnMfQWSWQY5oNeRgkigN6m5E9ogyvB1QJfA+muP8g3L19gJLKow415BObfe7mwps6frlm8vsWVnn5wD0BudbM0BICPkdJuuxjGLkk3s28NDsOyqqF2XJD9OuyNGEEe+Q3hHXUjqO3SUm5abckX+H5Owmp3fxK6eu9V2fkvYbUfbQTtyBbnlnCMsg+KeH6Do5HaWUhFTPTBx+doluGgRE+0J1SM1pA7bCzawOu5Vvpe1ppH5hgAisQfCS0CfLquUHA+UZ5nJxSXFPBUUMmAU66ZzIRlwlxJkOgvKhnHemTvAV/+H5g9TEO9OAHh+hkVj88VdEawfzUJYDONn3U4o+y12H8MgtEZVfm+xNW/YC/uXasgoMyeUuB4QIC/LCu01B2BE8aIROsuhDikGIHU8It+tz8ofIju5T9FWcI7TuCl+KvgjPILQHl0p1Swq2+YIC7j9DPzrO9QntiOgGGTYo3eVQhV2cHTBFsrFVaS/4ruzgsTLeU7MykcoExER/MAq8ieWJ+UrFXuqcpdn0e70Frx4FvISLIm7Huuku59DEH0wj8TcX4CzqWHA4vm/oR4/h4Ooun3t6svyKmjNYuVAoVPXG6mx1+jUMMnGckiAmJPysE9oThB/Rfk5p+XBtY29L679ukVzuZcvM15U3s532RsDHz0bA9IZ+XQc2wgcpNoQ3HaS4IGlsGUMTRZmW1YrtQkIRNnKd5D73o3Qbr1RH8vswAiwtAXXeHvhsf6QoOqr3Tz5LzVB/RjxN9d688TpUC1FxkPyiAtHvpYl0IZsir8FpGNxOYnrSAPT2/r1SE7b2E9rWWImjUGVITwyhU94OFSOqk05fVx0hb/hLgDJcDQMvIASR9uuxjGLkk3s28NDsOyqqF2XJD9OuyNGEEe+Q3hHXUjqOh0Vjshvgf/Q20tFuN67hCTTbfiJPX5BinKKbmCeApl7BLFFovEoEDf6hDhwzJZ/fGp0N4Rt9dZJxd4boaG/05zkAyJJ1fKUus6Maknxu6O21Pg0ENXu5Rmcv+amrYFsxepDeCiIHrmwu1GAadmMu7Bet3wm6ctvNpyqi9n13WHAuj76S09MO2sK9qrVrzh5IuTAzjxtxy7oYDYF1lJuotYoPoE+R2yGe6qKJ/CMCo+4bSb7kHS1Q0LASlRnTP7sQHNTRl6Q3cNSujrbI9wWsHga8s8VU9G5aoqxbtXKVLmQDdEV3TZr4/rJm2oBGQvu4KNqnXrQJnHMyFbr5oxRo2D4TDOQlLjyz/ATslfghNo+2hKJT/dr8gHgtCRvrb6DCnVUKqquF+3Fs8KnWRpEmD3Mpcuk6Q+Z7josGpITupG5B49D1kDWAu6sES0+3fpiW5JcfAOvsDY/1MsINxrMvzns9rB/3YDyaZCFGekbHRgwPfy2wllvdVx8/HM4JtQcd5e7p6eE2wNROmF3jQFcAfzmLbGxejRVwZVHtS+WvoPX9OCd+xH7mi3zz+J9iNocWsuUU9vwJZYkSUL5hPDrp4QQqTqXwYMDMdD4985JF+Mt2fcYeqe6QkOHDMTslteKO0hNVS0q7Uqc+/jRsx1jfJ/7YiU1MZ9IX0dbYDIWYhUYVj5kkN5ZVhIe3YlUntT5nPTz9BdobCEgEqJbqrj+nx95xs1uOeJ/LBcW3D2JvTQbl8n3wiuiGFmh/cCIAXnx4/7FSMTJbPkMVsoKBjH5RbhYUI6Mdrm0/XmPDMkcIMylhp5M2LYx1Xct1tUMMzpDeeQhFJP1FKuxNEHuCPaSZCq0kOt1KcSMr8qSVDHnjBvZY2dQzQeBviSNo94szKbiw=="
// encryptKey="HSM0hBiXovzc8SVcpwp6mJYwzchfHGAaf916DiWLVjq1AP673cRtwFfcWxHecEed3vtQ4cJDbBX4uPuQ29ClsRGxQxe1fAkcdhraOHiyVVdNjQFvUEwvjVfJIbA4MD4IRkaV6k7pbuFzs4/T/RqceJscwsJLORaLhYypYbsQav8="

// i=[238,25,79,244,146,91,244,240,241,64,61,4,230,36,24,194,69,138,75,164,30,207,92,228,184,127,229,239,29,134,152,167,213,86,5,6,202,180,61,50,98,67,100,195,162,114,135,38,209,245,247,255,151,199,218,56,152,128,227,126,217,34,163,144,132,150,162,144,96,166,177,135,64,251,251,172,140,168,207,73,230,150,113,81,69,233,89,115,8,248,96,55,41,162,183,220,71,122,128,177,167,95,204,129,57,72,132,153,30,107,111,148,159,132,172,7,245,42,215,134,235,19,119,56,239,31,251,174,209,53,81,72,40,243,102,32,210,82,140,180,228,243,19,189,25,174,224,168,85,81,178,192,255,220,245,80,203,228,29,19,244,196,4,153,170,255,138,19,46,162,240,148,74,125,236,142,124,104,74,147,23,252,141,66,41,222,12,226,202,167,12,41,202,45,20,20,193,144,123,245,168,219,208,200,46,127,255,57,150,116,121,1,215,231,48,130,147,159,124,171,2,210,110,7,79,197,102,255,55,65,22,186,124,221,155,110,0,51,66,15,188,61,184,229,137,178,211,99,171,81,212,23,126,51,230,215,194,231,95,61,126,175,198,181,140,134,13,131,228,195,32,93,41,168,24,185,219,124,151,102,116,4,243,175,99,244,165,203,230,149,25,54,0,161,101,145,45,35,83,174,232,119,217,11,97,136,245,87,70,65,93,203,177,128,1,59,159,13,86,8,15,199,57,98,96,56,240,119,157,217,236,184,31,219,194,45,45,220,222,178,99,56,15,30,120,153,194,195,187,66,202,250,73,209,34,192,141,179,118,253,58,173,72,85,185,230,57,101,53,146,49,197,73,59,52,83,2,175,30,193,26,20,58,20,28,18,175,29,153,178,143,189,229,251,251,132,170,77,130,40,237,197,216,114,2,77,1,60,119,9,26,40,214,247,178,193,194,213,36,150,35,112,10,255,248,123,154,189,161,178,149,247,87,155,165,209,238,11,59,144,232,215,138,189,19,121,95,235,72,83,193,214,0,99,116,211,60,120,3,135,143,126,33,24,174,111,60,80,224,56,95,122,158,161,141,235,11,117,18,32,77,249,181,107,231,172,50,45,67,217,114,0,209,135,96,24,161,235,167,15,246,181,113,135,38,198,14,137,70,243,54,147,166,59,179,255,200,125,206,56,172,185,125,58,238,57,90,175,197,171,249,72,62,146,221,75,179,140,11,43,64,153,106,199,67,161,255,158,135,113,128,61,112,244,227,231,26,237,167,56,248,155,46,23,181,41,90,5,184,227,232,115,67,24,44,44,45,36,212,105,58,92,221,171,150,210,46,119,50,143,33,96,218,131,66,193,142,187,222,32,130,160,138,155,151,144,31,183,147,163,132,119,23,16,56,244,193,124,130,11,122,179,118,18,236,153,147,42,230,86,88,188,82,247,130,29,5,1,212,99,71,3,215,180,77,4,193,171,17,78,193,79,137,71,177,67,76,176,50,239,56,252,92,116,238,148,68,135,192,5,225,130,197,58,84,81,110,143,203,22,35,114,176,162,64,75,74,193,222,235,247,191,211,13,92,212,150,214,216,213,24,108,242,173,176,158,103,234,43,227,70,80,94,139,181,180,203,246,49,150,174,200,147,30,128,109,147,155,187,218,129,228,138,15,248,223,99,210,193,203,189,116,92,127,16,12,86,184,181,199,238,53,37,39,65,83,86,201,59,253,19,4,190,170,110,54,44,10,33,167,83,68,56,74,84,70,133,19,214,21,37,141,109,89,112,33,169,53,118,176,230,2,77,51,199,255,133,25,0,121,23,154,74,13,238,5,175,167,168,239,182,33,18,120,225,238,0,232,243,142,248,237,242,228,156,30,156,185,10,118,58,205,248,129,95,115,27,245,246,156,242,129,110,144,176,56,173,201,188,220,81,138,33,23,107,158,79,141,196,148,230,95,154,208,247,114,112,153,11,100,18,162,207,170,80,60,230,113,25,99,207,12,21,212,245,144,116,163,26,228,107,26,204,255,250,51,195,27,235,252,255,105,171,193,160,42,209,125,190,124,107,78,155,93,99,55,150,59,224,191,63,237,83,3,182,210,153,219,69,80,7,78,171,118,161,64,160,186,90,113,37,207,65,243,81,127,218,220,155,247,139,20,156,201,4,103,52,23,104,51,180,126,25,66,231,79,186,76,25,82,234,203,92,198,83,162,124,28,134,0,24,19,65,250,175,12,43,229,62,214,205,87,14,10,134,59,135,241,250,7,113,86,183,244,123,123,153,13,187,33,45,105,211,117,247,229,67,158,222,27,21,115,232,152,189,192,116,13,13,240,98,59,152,171,246,228,113,61,228,159,56,86,59,195,157,75,237,13,136,246,18,241,102,87,172,212,219,37,5,62,175,189,45,250,245,97,164,235,230,163,54,139,175,148,205,167,8,23,233,58,154,142,42,249,237,177,236,84,64,22,245,211,36,30,167,174,233,253,32,129,72,173,170,77,29,3,166,149,17,136,243,37,137,178,223,5,148,74,245,248,31,38,25,116,153,32,181,175,190,227,180,2,249,176,51,233,249,165,1,70,127,191,13,57,159,213,196,82,182,173,85,216,102,161,122,186,138,22,164,58,159,108,166,24,36,33,79,171,149,211,249,56,126,122,169,89,137,167,223,183,248,201,198,130,27,251,133,200,157,238,175,255,76,49,98,111,176,82,148,208,145,43,95,198,205,144,164,41,11,68,40,42,11,138,35,54,31,51,131,8,41,186,171,134,33,99,235,217,121,146,240,16,22,123,114,235,113,231,207,254,108,82,179,90,47,150,255,15,193,60,32,191,5,224,97,37,191,64,66,173,54,41,89,143,212,157,224,41,71,63,144,147,215,254,76,33,102,186,195,89,158,29,95,178,122,118,186,6,217,124,195,82,189,67,171,5,80,18,80,25,148,120,72,218,109,0,65,141,174,194,49,196,137,181,198,177,173,229,155,238,176,36,116,30,206,226,148,124,39,89,183,98,38,182,143,50,7,206,193,71,102,205,96,103,19,198,121,157,224,52,117,232,201,41,243,102,167,196,75,87,113,188,36,208,36,120,60,75,251,104,152,135,129,223,56,0,191,83,48,167,63,3,47,109,195,225,106,234,149,74,74,155,34,168,169,44,114,115,242,186,211,91,217,186,68,203,167,218,52,45,205,188,95,179,83,58,222,171,152,214,184,5,241,0,108,155,252,155,98,162,191,153,253,54,240,146,189,77,149,36,40,33,191,250,210,218,167,37,140,153,201,146,110,120,180,139,235,51,137,37,144,51,94,27,198,76,67,186,218,201,94,4,138,22,19,97,32,251,26,133,66,18,133,183,221,188,218,143,10,114,202,198,192,44,178,244,191,219,12,196,184,8,64,117,229,192,244,235,210,152,209,163,106,119,182,117,26,140,129,198,44,218,98,4,152,223,72,12,23,228,159,220,155,71,230,74,160,120,93,238,138,6,82,81,253,49,133,200,165,107,203,12,102,240,136,217,177,94,76,140,110,235,46,65,162,31,62,119,176,99,73,45,134,173,204,178,205,34,32,45,216,60,110,175,220,82,135,219,201,209,20,71,11,217,230,14,13,124,28,98,183,138,230,63,242,207,188,138,135,230,48,127,111,52,142,92,58,34,109,215,197,79,243,95,254,110,103,153,192,177,165,156,178,1,179,29,90,57,20,71,33,175,5,46,77,169,182,5,95,251,118,73,94,198,143,49,174,130,253,41,242,113,166,174,46,19,72,60,163,55,22,103,215,182,91,228,229,94,12,185,115,20,141,136,100,15,67,19,43,120,232,243,176,221,186,136,178,177,138,108,227,149,85,165,91,172,11,176,147,213,206,58,112,128,26,17,61,177,25,120,130,92,129,241,198,62,211,129,113,162,14,39,6,84,238,37,147,113,52,101,177,89,18,54,231,235,213,192,165,240,250,121,8,134,111,215,52,112,44,25,113,175,20,224,234,240,107,178,81,167,250,242,12,210,222,164,204,86,75,0,57,235,45,164,107,117,57,227,153,252,106,35,59,147,2,195,105,70,175,227,56,20,27,58,118,63,72,91,64,166,235,247,150,93,196,62,114,112,229,13,102,190,169,152,39,147,201,230,238,52,127,173,24,61,49,49,135,166,197,195,153,207,172,111,129,238,165,112,51,123,13,109,227,218,115,2,218,55,215,130,39,9,255,175,1,151,251,143,25,56,211,7,20,232,144,44,152,218,43,221,197,200,249,62,233,123,174,127,53,144,35,54,51,149,233,104,222,93,237,147,20,171,215,108,81,108,200,220,82,49,154,142,22,135,136,217,182,35,160,185,132,105,176,43,107,109,232,87,121,89,64,208,92,189,51,11,195,236,91,188,32,28,185,247,66,178,10,83,243,6,179,116,228,49,220,67,68,3,74,251,186,6,106,171,73,19,204,121,205,241,37,176,38,102,236,187,94,198,66,103,143,59,212,43,72,226,52,139,128,163,170,172,28,89,63,145,81,44,48,126,195,85,167,60,0,47,245,143,83,85,98,90,73,159,159,196,123,129,199,196,109,58,24,6,140,141,180,116,186,190,116,187,251,203,14,156,19,27,143,120,249,203,137,158,204,194,34,48,3,69,224,39,124,77,64,102,243,163,217,8,147,246,138,204,145,51,141,19,138,139,0,185,220,166,104,84,108,199,64,148,249,70,156,100,16,151,54,212,115,200,218,39,218,196,142,130,19,194,203,117,107,196,41,130,13,64,86,21,54,205,137,126,235,60,47,245,127,186,224,6,239,20,198,78,161,63,250,66,194,36,205,177,114,187,3,168,137,187,26,247,206,221,45,216,120,13,73,208,227,219,147,31,46,83,224,104,17,153,40,128,67,170,226,214,17,7,117,140,141,188,152,126,104,128,182,240,57,111,207,129,146,200,252,60,238,206,136,12,55,234,3,15,211,26,196,60,27,210,126,62,197,10,67,8,71,16,164,49,31,161,51,0,62,203,141,163,205,179,178,221,114,215,48,217,157,190,113,84,190,44,51,63,61,118,212,24,31,149,128,205,194,115,171,200,217,20,119,53,87,229,17,116,14,204,148,229,76,16,212,238,43,225,191,44,64,3,134,40,152,221,89,189,21,105,75,206,115,115,174,204,163,225,112,116,164,52,252,227,65,112,11,193,146,226,224,252,4,170,145,96,181,194,161,118,143,10,11,149,40,254,30,140,196,126,98,135,192,1,10,7,139,230,112,151,239,129,209,83,160,174,11,86,139,48,99,63,99,157,39,160,95,184,80,255,60,130,213,168,196,86,106,144,16,94,24,164,95,231,152,253,241,58,0,217,250,217,243,157]
// i = new Uint8Array(i)
// get_L_to_b(i,"7wz29QB29byKJl07cQRvog==")
// data="biettbz92nt4aYr1TUtR79MdI2zscUEynKIJcEMzIY9Q6JDGcmlAwFq7+0WGMvmKITsvXAk7P8fU4k86Eh73MXmDwuLgPMrrlQGj7G6hyTGbrGBP1Q6Wc+CA48kSPFoCecP4ac3tEBezHXpgf2KmfTZWloQ9a1JR2HWf9P0ElpyUWanVJFfh5nA8KHNUBm2xyN99lVGaqS7/w4ITzetMJKwwYSGR9NoEImgY8FcD7cP/ZhLEXTXURr+Xa/XILCtuUr5PVsRUZx0L1pQE4bKBZiOJy2GPJxHsnabT+93pgURjK7Kb+bqvRbLJKWqwoAKGPZE9BwYZOKpmgnoZ3Si/neC2XkBfRqNmbiihi6+Or2hmLEIph78AFWSHoObGDgi3wTEcNfm6NMbgJ0Wj1Yhlq0BHKln5cD99zl2Q0UJASMPzocFRB6BU6DuuomMJaIUNs0OlKHlAvyOk9IlsO2m46XVCDKJCErT6a/vHMlVBjNDV1FrfLfyDz4PCpCMGA8N0b/XC3gvw++JsPwJTXCem862HCAaobkzF/f3EBJrK1g3e4AyCBn7Fe82RMmx+HWAPFojUSv3/giYiHBZGJ2OC1vCcYTdADggFv4zBF2xfpmt7sUJHfqGV/ClKTVKVhxdEsOqcF123FArNFINQb/5d07GR3YrOk3i8GLRHHz6uhNtDlbqz2exOPMe9rNE4by4FLKVL9Vdd2IA8oq9chdovvxKUjqSjPVMaVsHn9/MgNmaS5cImvEmuI7TB9JJDQ5xc5o6ENX4R4mTKb1Mlpn2hLLZxb9hbyF3Iyl14fe6Mjyqyfn2NFc7vA5EPcTIg8FSy/tMtjktlef9wwFFtQrEhxFAba666xwT9vbbVLMOBS+CbrGBP1Q6Wc+CA48kSPFoCecP4ac3tEBezHXpgf2Kmfb9RgQ//UVgZVwZTDa9+9i0XaYjVJYJEptCJkY0nxHXq8+fYGFl/zUGbmW4LXNYUZbIK7pVXLzWWYQCVI01fGus/ocFdvaeZSsc5wrxJW4+vgp7z90SFla5MR7t2RdsNHl/NOvQGsZPQXoxO5EvBrG693d72msFaLa8gzePYm9+Oqe+ADdv7LYxPT9sllJ4GCzHWyMbRJOnoha99/AOFILjcJYq7s1MvVRzY82k2EDs3oVqUy50nvNnJkVDpneM0zwKQFHe0xKydXA/GAI3MBtM3EyKyLTVlYeVlveN6OHDXCToU0fGYrAR1FSxPvCdbh+JvSRAvdEAbVgkzryU2P8W5GnH2rt+2TtCMDnIckaUdtlFg53A6KGQ+vhfRHFK771HRiUALWzFAwPdh2Q1UPWeCkgxnRYuE+rjPMBU4WInGrUh8sgtokzuj+kJ/liWhxXdxoOvkEZWj6MzPhQtlwkqgaQ6qWDur3oAN7+0p+0jLtbXPphar3sDdgPrrNpudr2pagpizHaXEV892/lEqssYzeaMQlQ15bo3twV8SRIhg5TXACrHL5UlXwfj01trekOQtPawfX2liOrSccbl7u2FS2xttk3tRft4B/u/1UqwBOt/qnlO9oXWBWZl8rAD8FH1ougP3ljm4HfkNAWweB1+BQb9hWnw//cJ5bvna8T4XZeKU+l5kmQvoArQMg7+Iwr4YknUYP4RMFUHkF8msgW0XPnaEqJWWP7LYkpQVTPxDYVfIcF71sik8qdrhLuP5kXQ7WudyTT00EvFTqPdvTS0RSVIlSOzKYsC9UcmH+mwZC2FbojpwMnVHg5Quwey2RPNPxB7+vwGlafjL13CEzpN1r62Bc72QijP0mDmmj+/JCR5RzYVLx5e26jGYH6DUvg=="
// encryptKey="oIs7b3P+0fuppZbN0o9JkWH7IDWJ7Cpi3k0EWslh5AuJvp8QqSqt3lSjIaQ6lKd6biW8e+ZOGaVqQhAu8cD0upMk3X+q6mUvohS7F+QLMgOXqb90On+y6noTeOZmA/NUBPuxG6TOwj5p6lVW0u9GnJ7AKb6PCxlk7fsuJpqY+/o="

// i=[16,244,141,196,255,153,80,129,148,158,94,18,43,130,163,32,184,12,10,37,51,77,31,105,217,108,149,180,89,64,125,167,110,222,55,171,113,3,1,172,192,106,79,76,150,1,238,48,240,174,174,85,37,49,146,193,231,136,164,15,56,123,174,37,0,127,26,70,210,242,199,93,220,205,229,187,238,27,232,200,81,95,12,232,36,189,28,216,70,17,238,208,7,152,103,210,108,173,14,109,13,242,56,125,100,126,95,49,237,86,122,6,249,251,168,97,248,121,200,15,232,124,12,67,156,195,28,189,144,39,180,176,241,8,214,168,215,184,51,27,136,214,120,115,147,109,112,245,111,226,175,145,225,48,7,107,227,215,196,6,81,254,111,252,132,111,115,250,84,58,71,77,209,145,233,67,241,96,64,23,101,194,95,209,224,11,190,94,68,187,65,133,175,172,42,122,94,184,246,156,77,175,148,4,173,173,35,129,184,0,37,92,110,79,145,241,85,29,192,254,200,159,232,88,218,203,214,48,11,165,103,18,63,40,190,20,60,255,92,214,57,75,170,200,9,198,198,157,115,114,143,85,122,158,30,101,177,212,157,110,251,152,146,58,236,45,243,216,67,53,120,20,162,47,40,119,194,88,227,179,242,117,64,184,154,23,22,75,2,117,241,179,185,117,160,112,8,29,9,211,187,162,37,245,33,73,80,19,158,198,89,168,45,160,109,62,224,36,57,145,51,142,216,115,117,142,89,79,77,125,189,133,202,62,236,162,85,77,16,11,120,88,70,146,155,63,225,54,163,160,30,160,11,207,22,175,27,188,163,120,160,131,134,188,226,185,218,103,205,155,43,71,89,191,95,227,253,221,38,1,245,34,201,247,246,114,40,61,201,120,219,119,150,62,189,49,172,14,157,126,98,141,118,160,194,78,163,194,61,230,47,230,190,217,130,241,20,201,87,219,224,53,159,69,67,108,136,53,191,81,132,171,144,238,218,73,3,49,154,88,53,184,158,120,138,207,244,92,68,226,19,187,171,171,154,44,236,116,83,214,241,79,154,4,217,81,233,20,46,235,195,2,160,77,208,249,151,206,137,163,70,34,155,136,168,131,178,135,101,71,228,216,239,59,209,249,161,105,124,216,77,95,51,235,19,46,46,133,171,145,11,135,244,57,147,56,237,25,48,112,243,40,15,40,117,251,76,140,146,160,20,39,164,181,17,144,6,50,163,243,119,152,220,74,124,107,58,138,231,216,68,131,124,105,129,118,46,39,177,16,26,191,25,1,25,220,200,80,221,58,178,79,164,225,7,175,11,233,138,158,132,167,142,142,114,184,25,28,189,155,237,4,200,216,43,59,177,212,203,166,219,30,81,30,186,252,144,2,145,21,220,247,188,225,229,146,234,175,92,167,141,238,245,53,220,139,225,233,225,66,94,94,187,28,54,207,232,95,21,65,43,86,182,211,138,75,83,16,212,27,49,156,213,184,156,165,71,144,123,133,75,116,101,78,196,55,203,168,162,164,89,122,222,194,227,83,255,28,208,24,108,186,92,241,167,69,191,54,199,201,225,191,105,78,202,141,143,6,5,222,197,4,238,2,191,52,53,8,158,49,59,89,52,18,179,167,150,185,58,76,73,115,97,132,94,45,189,147,79,176,231,199,245,19,87,181,118,108,141,70,115,120,150,61,132,154,235,7,2,71,39,205,107,7,193,24,234,196,210,206,120,118,39,254,156,189,80,245,104,8,70,72,209,250,31,158,183,141,146,177,72,213,221,228,145,91,180,75,63,167,95,172,243,50,204,229,15,108,196,99,70,100,96,47,220,222,220,44,252,58,63,114,222,135,167,86,181,128,68,115,151,250,100,21,138,172,220,122,134,161,239,254,246,102,53,49,51,226,121,120,224,99,2,148,30,173,60,134,32,70,175,170,19,145,41,190,196,17,237,52,137,66,232,15,83,179,97,212,59,233,29,69,111,251,74,96,247,84,79,197,123,181,224,66,147,150,248,58,163,142,108,243,130,90,222,44,236,183,28,213,11,28,69,184,180,101,79,74,175,114,59,4,174,48,223,170,95,64,89,58,98,84,83,171,188,79,161,46,25,214,247,208,176,80,44,219,16,10,14,222,201,181,129,38,221,226,120,158,44,158,43,145,16,122,168,180,142,84,141,248,196,60,61,96,62,74,183,213,225,80,33,26,85,199,237,160,57,148,30,76,10,129,123,234,235,4,151,240,98,34,141,42,161,134,126,108,51,152,139,172,210,128,39,202,61,163,47,54,112,10,220,163,184,223,255,150,215,78,79,16,16,215,125,203,130,71,155,51,27,75,122,72,180,32,155,17,18,251,82,172,141,35,11,240,108,73,41,135,141,121,94,156,41,20,225,95,246,210,94,6,201,47,173,114,73,115,104,4,78,11,237,114,236,20,150,46,113,126,87,101,29,112,158,19,62,126,71,215,25,118,238,182,161,34,249,155,216,127,201,32,152,250,10,11,148,202,168,51,13,145,91,197,234,148,151,95,18,193,5,79,76,58,221,249,84,223,105,63,132,97,44,232,9,221,176,245,166,255,112,204,213,221,172,63,177,174,92,234,240,113,92,26,210,53,127,102,166,5,49,96,220,41,238,129,42,69,77,28,155,127,250,111,197,186,97,221,244,58,10,36,97,173,113,217,215,143,11,143,15,235,164,90,238,117,98,30,99,128,50,43,184,195,232,213,116,75,255,95,61,77,100,19,176,228,221,239,23,218,4,212,108,241,189,34,106,40,192,193,165,46,16,186,115,6,44,134,2,171,224,30,13,46,175,14,119,156,34,44,149,223,23,50,109,226,118,37,41,68,162,251,157,62,248,29,35,122,140,217,136,180,143,206,195,32,119,201,232,208,102,140,203,246,79,231,145,85,162,83,113,7,150,220,24,151,89,116,160,195,117,53,109,107,230,112,66,37,27,213,233,49,73,143,3,3,4,7,184,40,75,160,117,56,168,105,106,22,64,46,236,122,223,83,81,197,19,177,36,216,111,82,53,178,206,36,160,85,84,88,164,26,14,209,218,254,32,243,245,156,31,86,226,175,104,187,134,106,74,8,174,13,243,176,239,254,52,54,214,165,70,226,113,75,158,140,150,199,147,227,46,219,68,198,246,13,135,113,53,215,79,64,86,233,35,217,20,156,185,250,71,101,169,74,88,211,102,121,186,3,9,210,138,72,3,205,11,229,138,241,60,206,139,116,85,250,171,196,47,176,180,175,52,68,108,166,62,187,20,189,207,88,44,122,119,205,199,161,244,48,140,31,74,4,255,196,65,180,134,149,18,78,109,158,97,155,251,49,208,215,115,210,182,19,223,15,151,170,104,60,61,241,227,241,242,125,222,80,94,113,60,95,153,6,103,238,51,217,143,180,147,56,52,236,154,13,40,176,99,201,145,181,124,87,129,23,103,0,167,86,220,95,102,89,114,244,96,85,151,102,95,119,20,2,216,33,191,52,174,154,49,225,36,60,69,79,166,4,162,201,166,54,154,166,214,124,175,242,47,241,219,122,107,167,177,244,106,50,182,137,25,161,170,240,146,17,236,188,136,74,89,153,199,213,149,40,98,69,30,205,44,167,20,253,52,26,10,76,55,33,118,102,42,187,197,92,180,93,85,21,235,67,45,179,125,170,127,179,172,68,7,122,34,214,214,123,243,125,214,216,204,162,10,120,25,254,171,119,128,171,197,155,13,196,64,242,66,63,96,171,228,226,16,93,89,84,241,43,160,240,110,149,241,139,162,79,69,194,92,82,130,205,227,245,44,71,18,138,69,217,234,147,122,142,68,205,208,204,140,163,213,45,123,74,202,213,4,160,22,229,235,92,158,160,8,212,207,166,44,44,145,92,210,214,153,134,71,244,183,220,104,104,103,101,161,208,7,130,232,195,143,118,239,213,208,166,218,95,172,156,99,95,252,60,216,74,133,17,151,255,119,225,94,63,186,122,103,164,89,30,30,104,230,117,109,201,184,85,25,133,224,245,101,63,173,211,4,225,49,249,168,24,107,108,220,79,240,248,97,150,143,31,24,75,16,127,138,220,191,145,178,191,86,76,26,63,252,198,191,120,67,20,221,56,105,219,24,136,104,3,106,20,157,47,137,128,119,247,214,84,46,78,84,144,234,143,171,174,49,144,86,1,234,154,172,35,186,198,201,13,40,189,156,119,146,161,208,13,7,140,196,12,247,139,91,54,105,184,159,221,240,74,124,219,138,190,137,226,207,54,135,186,221,160,92,235,242,74,202,197,251,116,79,187,168,64,103,33,38,222,63,124,162,1,171,223,206,166,12,78,233,157,107,82,133,47,25,75,62,59,8,209,102,149,151,154,192,117,114,106,207,237,127,208,222,180,140,37,11,245,165,121,11,3,14,113,13,79,249,222,65,209,2,223,237,43,182,134,184,177,248,1,199,124,151,132,129,218,38,3,14,83,149,99,139,13,63,157,255,179,59,149,106,15,150,55,211,88,148,50,237,118,4,227,194,82,102,101,54,25,21,81,85,84,228,168,99,184,2,217,118,240,24,72,219,125,178,168,211,73,254,186,6,88,43,112,54,168,242,105,219,249,54,134,96,229,4,235,83,84,2,103,198,12,252,133,5,22,38,13,192,163,6,212,71,47,198,132,130,40,198,29,175,113,22,236,31,247,244,116,244,92,210,217,33,69,177,157,0,136,114,182,123,73,173,97,190,226,244,2,164,82,58,148,60,188,176,247,179,213,78,91,188,99,11,124,12,46,3,79,99,175,200,47,31,144,5,26,116,77,151,48,228,176,67,158,187,69,139,150,158,89,23,132,25,0,88,215,43,18,4,16,108,73,113,49,216,244,249,94,181,244,204,146,242,182,46,114,208,16,167,109,140,177,185,114,85,112,11,255,96,39,167,232,56,149,221,248,85,43,174,208,44,162,153,209,208,240,121,104,6,123,190,181,31,237,120,218,175,231,188,100,21,99,110,104,231,182,204,248,125,237,18,36,94,90,5,196,26,90,148,72,149,172,17,99,238,36,182,109,236,78,136,155,250,151,64,243,36,44,135,38,85,221,31,193,8,189,235,173,255,131,208,122,234,30,30,207,2,209,51,149,232,169,237,185,136,75,149,135,244,95,240,105,36,10,206,117,196,54,23,9,224,240,55,139,67,214,233,239,100,189,160,32,35,17,242,170,239,99,98,156,194,89,159,98,159,183,159,202,12,157,59,170,123,173,133,30,157,89,220,39,182,225,57,75,208,45,231,177,29,142,72,48,58,187,11,210,173,88,191,114,212,141]
// key="wRjs4CTicqVoArN6yrjShA=="
// i = new Uint8Array(i)
// get_L_to_b(i,key)
// data="Px7bVOLg8uAVWLArC7fPYVKzOkGaAT8OzeCtR8KinMGUS+X6/CPARAzWkxF/1abpd7uESleP30M7C/mhpyXT5gR6ZtIghTCr1H+lojxI/m8heUNMOY665qbvNMtZ9CewlqomVFrg+ne3dpk8NSgAjZYsmSBsRYLN9m/GTVS7vU1Ol1Dm0V936KNV7KfQT07OmZSMPZne9BXDkNW0RTfDqC5VcDWOnaihnmsgf7lix5em6l+JlbH/B1hJFfW85r5ZG8nBDbrobmYqT870n+6Ry/r5JcYgAvm1z473rq3cZV26NfhttwPF6KwXalyxTbLdHmB6NAHB2QTaU5eMBY0MS/8fn0nUxP+WWRSiWR2SuYf+uR0BSXrwAt5hXbEJvZA3ZwYwGUnGqzXMdZLE0tEINYRxPKZ2dBFaGYT5deqGesA1sj8+gR5ptH00GS2NGD9F6OjIzZXZfdzqz4RRYg2mGaBFacB2tfRgu1Um0wTedOxvT+ebasd/juvgAKUHSgr0GZ1lzWP70aZ9XgCZ9dyX5KEqRBkxdYmXLth1PG0PayEiRKMKQsGohc0js8rGiMg8vd3R/z61i8BBy3VvnYwFGhGQsUlTkrMamozxWQibPDhwLNuT8UKnXkppooTtxKnwB6Onypkk9yBMcHacnmiT/YqKXAhokQiGREFqVFKCm3/+u3etio0pjN4AOMogq1tG2QfDfwb5b3q2dTgHScgo9OVabpMM99Z3UW/0Gjqm2dMuOhhiICFl0LTCb9ZcaDEkldCOEfSlMz5x2tETTPmJIgUOoz2wIsxyI0y/C8ubY36RLWWkJqyPesknf4sczgMhdFU/Q13zeIHFOihEayON7VVrTe6PndgNXQg8fZXQh2gheUNMOY665qbvNMtZ9CewlqomVFrg+ne3dpk8NSgAjZ4AO5j25FtnzknsAzN7FFC9VOl+mOOk7WWuwF7QtQsGpQYzeYcYCwPQBp2I0ylQxDrxhS2QLIB8mhzzo5vRpEGdTMQ8Ctp4SpWDNj4c3Gmxoze7DQXdxGcloktJyMMrbJdspB7yxX6d5pzUOXshWMSDCpuR8AdY2n1j6gc9h1PFBQ7CtvoNPj+g35qJE8XYEF2RU+Q8d3Ie5swZlWMRk83l2Wh6kbqd9wYhancra5tHhzeB4V94452Nn0f0+nCfRtA8NEbq262Yfjc+MQYfFaRyNW79FMZEud1p8wVd/ldowzgB/yfuiRnBjxEU+Iqu1RPPCCz4e45cqNOqp4Hc8mXHzF6m4tccT7L3Aq6nX/d2xJCYjJojGAuo3OBeV0I14l09JCfvc/Zb5PL2SWxXNmwYdFpXJhjcey7dmbUI/CtlOUpTdDPKX/AhGbo0uSy8hGi1mT16lsl8uOs5UBfN29vPWAoyIMJhQP8luqpAHbV308/VCuoWD4HqPJsPee3UrTuwDVNfZA7qGadx4jrikWLuzp1f3R0HO7NYCqfMXqFUAGETFYnY9uP6zFdovqZ6TjZvknw32QhX0okt+E4+WJHSSMkzocWb7xOpHEKgO62GFRfTJGwycJfNkft0nRaCrqyJY8rckg4LdRlI6v76UhMs4VgCxnJgeV6sDkZ8gzHU4v6f+1XC6xX9jIA8t5l2bBs4AuxztAhjl+0EYVdWNXHhX28qMYm+OnlZAdsOYN5SYZBHCJTzx+j0Fy3Yg6FMCltWIp//7XUbqDyDdYTY57qhZSosYrqglMP9pcUFn8U4zAu6pC52F2kU+Yxi/u9M0Xv7o8mmSI7OT/0acWUQD1M9QPI6mGVxnr1eWRTeIx9quNCLZNU/qVyT8qqPmnwPRg=="
// encryptKey="jKkK+bJ7xXNwHnFh/EhBUoIk+fP8nTouTOWfs1F3ncG6kp36zjBJCkFa2TAZrZJnDpiJGt4T+xWpown7nDbOaPs7vwguI6fj39YBC7xkGJ4nSk8/eyxC9m+KSXR/HAw0ha2nXjgin/ikQkea0K0WbTUyKL6k064RIEBoEKYooNE="


// i=[214,106,38,236,46,33,88,98,48,252,64,221,71,79,252,195,162,49,14,148,139,160,152,221,160,26,191,99,72,114,179,103,68,34,17,90,16,143,56,170,56,153,16,173,7,197,181,20,161,191,171,48,60,210,243,57,209,7,0,213,165,196,71,194,81,146,214,150,186,220,127,245,192,65,1,101,27,10,32,187,153,166,99,110,79,126,44,148,15,25,240,166,178,29,173,147,253,243,142,57,73,194,157,9,228,241,74,176,181,194,170,248,65,144,206,217,239,152,121,63,119,242,23,70,236,66,104,46,176,118,40,103,188,131,27,27,47,160,146,92,216,131,70,219,109,120,169,29,254,184,37,39,222,250,59,9,81,32,239,172,26,160,144,57,205,233,194,74,192,213,93,153,29,42,139,49,204,31,62,185,252,93,211,39,236,24,62,238,143,85,174,127,155,254,68,138,217,34,122,221,43,203,116,144,237,122,20,141,4,208,144,3,66,236,76,38,236,162,17,212,97,130,16,26,225,70,64,61,167,3,215,232,166,224,75,155,81,117,81,153,80,125,10,51,14,179,202,213,55,156,19,61,136,221,120,57,63,78,161,155,185,201,122,187,213,46,90,118,79,226,217,224,36,253,20,162,197,118,29,102,242,72,124,26,114,115,200,136,133,145,202,67,192,190,238,90,144,223,200,254,232,145,149,191,231,176,213,125,89,2,225,163,164,44,127,54,121,164,120,169,169,109,246,250,173,145,175,93,118,147,21,141,229,60,23,193,159,42,49,182,45,153,33,207,196,78,81,245,100,136,20,45,151,215,87,110,42,39,245,174,50,131,101,140,17,196,97,167,8,97,100,169,104,189,179,201,59,91,121,136,61,67,209,168,9,89,83,151,91,209,100,100,137,111,227,249,19,45,220,243,196,180,158,102,236,240,174,232,180,110,251,3,239,241,133,229,62,168,80,149,177,187,139,53,59,139,236,228,148,27,122,197,222,139,50,249,152,83,158,46,194,142,77,101,174,225,23,219,81,164,187,223,90,134,192,27,57,214,250,162,229,217,180,15,59,215,152,165,213,17,105,1,165,204,123,19,173,20,179,246,196,40,45,251,103,119,135,214,102,97,7,225,121,59,211,35,180,19,136,61,42,215,71,237,194,198,176,17,91,123,47,79,69,101,102,76,255,102,166,141,66,22,49,62,88,71,209,91,114,105,73,68,212,195,135,139,203,254,158,6,174,121,60,98,82,58,169,80,61,34,204,118,82,238,177,103,198,117,85,212,100,138,121,232,188,40,230,33,81,228,55,75,201,27,186,92,196,95,163,130,186,30,37,40,30,127,247,96,80,247,51,84,27,206,131,45,111,195,157,14,148,139,70,63,97,166,15,47,181,135,53,212,27,117,10,133,147,72,32,172,225,54,4,170,44,106,3,7,176,248,0,155,62,171,11,218,149,33,206,93,53,168,157,80,54,7,25,81,103,157,18,231,157,195,102,203,57,252,213,214,141,220,255,33,239,131,121,60,125,62,243,26,225,68,105,76,75,113,184,171,212,219,67,200,53,214,234,66,10,168,182,208,98,54,254,59,189,248,205,142,65,51,187,244,3,243,45,80,222,165,23,167,91,188,69,18,103,86,60,137,241,225,228,14,157,172,40,26,199,67,201,77,182,219,45,131,130,117,94,54,136,244,195,195,170,193,4,244,95,181,239,121,30,153,225,245,164,249,215,220,246,3,162,146,107,48,224,0,83,238,79,250,62,157,95,69,78,106,209,85,250,160,179,64,220,36,91,137,34,221,101,167,33,200,207,222,248,117,240,32,2,179,133,123,64,123,29,232,144,194,86,231,211,123,64,116,21,136,53,21,169,63,82,72,35,1,114,16,105,19,20,225,243,131,113,206,202,133,86,48,151,106,235,112,224,147,4,214,70,137,2,143,112,242,103,203,43,117,255,128,235,84,66,60,183,105,122,35,199,23,193,23,230,148,19,98,184,27,42,189,208,29,138,98,210,59,57,122,71,46,248,177,191,130,3,138,248,37,153,59,44,46,219,45,49,224,109,247,39,228,62,193,108,158,243,137,74,194,109,167,166,84,43,186,82,213,25,116,180,142,181,201,173,59,106,198,247,11,225,16,233,96,227,196,32,163,206,196,148,58,65,24,254,238,120,176,134,162,151,226,161,33,81,52,97,81,60,14,98,10,201,21,201,233,175,37,204,135,80,215,47,205,70,231,184,114,144,18,34,222,164,220,192,173,85,147,34,111,162,249,247,81,105,12,229,116,60,186,193,254,99,54,220,30,15,0,169,39,128,227,113,171,125,194,31,228,212,239,158,241,10,15,239,150,173,42,202,14,218,55,242,58,160,204,14,232,33,68,95,255,77,56,21,60,142,96,220,67,208,137,147,142,234,174,228,212,38,252,41,95,7,15,167,245,84,51,151,139,132,237,216,100,62,194,196,94,253,147,228,77,189,64,107,164,2,179,81,103,68,36,5,67,215,254,179,29,14,1,57,251,129,96,250,254,60,211,90,87,252,255,55,57,204,10,187,249,224,122,131,152,62,3,14,229,217,235,224,246,111,233,130,136,137,76,236,87,104,85,68,81,82,87,106,80,104,74,48,248,44,90,63,87,255,163,7,199,213,66,114,116,233,2,248,22,105,20,28,248,127,206,247,51,131,173,98,152,4,85,64,183,79,112,139,187,195,13,229,214,217,90,42,11,145,67,23,73,113,140,122,75,197,148,173,52,185,114,78,75,84,227,186,116,97,161,44,47,63,31,84,188,191,151,30,244,31,58,16,147,176,168,92,140,89,41,23,84,254,99,255,225,0,190,199,166,80,82,82,226,72,0,170,117,6,220,220,171,176,245,61,162,46,185,176,39,39,203,46,193,140,70,246,238,251,59,101,204,159,138,141,110,23,205,214,9,93,130,121,139,133,174,246,127,128,60,193,174,118,94,232,116,241,49,52,18,122,50,29,130,243,157,230,121,67,112,190,17,169,240,120,157,112,235,10,240,133,103,9,241,19,118,96,199,240,181,38,206,47,29,248,106,198,78,245,112,59,7,231,27,19,174,136,68,195,145,132,252,241,84,82,151,91,111,62,96,88,140,245,180,140,245,169,202,94,114,215,104,101,225,160,118,132,99,3,65,195,206,159,116,247,29,240,117,80,86,182,127,72,27,209,228,131,88,6,211,183,111,242,78,119,172,159,188,78,233,165,103,195,69,131,24,217,71,185,61,78,211,136,173,220,83,31,2,169,99,62,223,82,93,6,0,129,42,187,62,94,244,39,208,3,157,4,24,51,144,215,79,84,66,46,142,122,3,167,38,54,185,31,67,218,104,15,39,50,171,101,34,223,123,86,40,184,99,126,68,215,23,20,53,232,144,42,201,72,215,219,75,179,38,33,210,185,150,6,228,196,121,187,72,218,227,201,126,121,203,134,24,79,83,96,79,233,134,170,135,201,57,121,245,175,128,102,50,96,161,229,135,180,67,132,180,18,127,136,52,46,93,131,147,18,128,76,168,172,206,218,4,17,191,197,32,59,105,86,210,13,226,9,106,52,217,172,240,93,255,180,242,15,156,54,38,85,126,164,238,182,234,105,20,234,49,54,175,198,177,139,66,111,127,164,178,50,46,240,171,139,34,201,207,226,202,96,35,17,201,251,172,51,190,234,144,101,207,219,162,223,83,38,53,96,0,170,110,227,82,170,108,248,115,192,73,61,188,83,52,135,215,231,150,119,75,66,204,113,248,158,16,254,31,189,214,116,70,4,48,35,157,188,199,200,149,23,184,174,33,67,162,151,225,16,212,138,207,165,18,218,25,38,78,116,207,179,70,139,178,157,254,166,134,144,93,84,56,160,216,33,10,183,24,146,104,251,112,189,32,193,58,61,209,116,209,121,66,234,32,83,131,22,176,12,236,154,99,237,66,215,109,248,176,144,88,45,54,23,181,29,245,76,131,92,210,253,139,157,223,185,103,103,16,74,156,175,247,223,203,197,231,235,226,104,172,182,206,20,176,241,252,224,134,85,85,117,176,7,228,243,170,141,48,216,138,165,208,192,183,41,208,2,5,12,0,163,221,34,62,169,114,112,99,178,5,21,73,254,22,193,156,132,217,109,39,28,86,109,90,42,237,40,97,58,13,173,42,162,232,186,254,4,102,133,124,156,145,105,204,123,100,109,198,202,26,33,242,80,196,73,86,111,226,131,232,135,124,168,134,76,163,166,56,52,154,247,2,56,218,136,69,151,227,94,240,239,185,209,129,94,64,224,73,139,147,195,89,151,185,82,165,128,12,77,58,37,134,243,172,151,245,140,22,160,195,174,211,238,138,219,184,96,142,156,145,2,134,86,174,46,153,221,22,190,29,31,92,139,239,216,178,37,99,175,213,142,123,188,190,139,38,2,100,61,87,240,66,105,219,253,227,17,220,162,61,161,128,161,154,213,3,207,99,86,132,204,103,121,35,96,160,254,103,122,247,226,97,133,159,204,14,158,204,174,24,159,190,157,225,23,184,206,7,132,193,60,93,242,80,105,125,189,158,250,15,92,128,172,245,255,205,231,24,156,116,172,189,102,148,124,128,214,219,73,163,205,73,69,23,107,223,254,213,205,251,44,68,228,107,69,70,98,252,143,31,172,172,252,118,233,220,146,34,102,191,245,41,228,58,196,5,56,123,35,32,109,99,87,209,59,190,78,81,128,9,39,232,141,102,180,181,214,220,130,133,160,54,244,43,54,55,17,254,232,189,52,204,91,223,213,138,121,234,183,156,193,142,175,80,157,35,10,220,58,175,237,64,105,59,220,71,250,65,207,101,131,145,139,216,6,9,91,236,158,245,203,4,125,245,217,88,206,178,5,233,190,30,232,36,59,235,188,226,214,165,200,26,104,214,208,189,160,236,106,14,35,14,244,23,50,154,74,67,90,83,209,114,62,239,217,224,31,46,5,73,150,46,12,196,44,48,75,156,195,83,71,138,186,157,68,16,83,255,125,162,24,102,232,188,198,87,203,31,153,90,137,181,206,31,120,250,6,165,63,128,78,225,177,156,176,207,152,147,62,85,170,135,141,161,77,196,122,134,84,158,162,242,178,113,61,33,29,203,248,87,27,100,104,89,139,58,136,82,133,180,145,53,85,106,10,95,0,120,116,194,19,176,24,40,49,7,69,133,183,40,6,56,94,42,36,241,99,18,42,56,57,162,9,170,82,210,248,75,58,94,43,19,244,251,10,80,211,121,146,235,160,34,143,111,234,22,128,228,12,113,147,240,101,188,162,134,145,92,38,113,133,231,89,125,88,139,128,52,144,44,122,54,75,191,59,36,250,100]
// key="gpdrlSIx7s6LoLX09+Dk+Q=="
// i = new Uint8Array(i)
// get_L_to_b(i,key)

// i = process.argv[2];
// key = process.argv[3];
// get_L_to_b(i,key)
